{"ast":null,"code":"'use strict';\n\nconst tls = require('tls');\nmodule.exports = (options = {}, connect = tls.connect) => new Promise((resolve, reject) => {\n  let timeout = false;\n  let socket;\n  const callback = async () => {\n    await socketPromise;\n    socket.off('timeout', onTimeout);\n    socket.off('error', reject);\n    if (options.resolveSocket) {\n      resolve({\n        alpnProtocol: socket.alpnProtocol,\n        socket,\n        timeout\n      });\n      if (timeout) {\n        await Promise.resolve();\n        socket.emit('timeout');\n      }\n    } else {\n      socket.destroy();\n      resolve({\n        alpnProtocol: socket.alpnProtocol,\n        timeout\n      });\n    }\n  };\n  const onTimeout = async () => {\n    timeout = true;\n    callback();\n  };\n  const socketPromise = (async () => {\n    try {\n      socket = await connect(options, callback);\n      socket.on('error', reject);\n      socket.once('timeout', onTimeout);\n    } catch (error) {\n      reject(error);\n    }\n  })();\n});","map":{"version":3,"names":["tls","require","module","exports","options","connect","Promise","resolve","reject","timeout","socket","callback","socketPromise","off","onTimeout","resolveSocket","alpnProtocol","emit","destroy","on","once","error"],"sources":["D:/LangChainJS/chatpdf/node_modules/resolve-alpn/index.js"],"sourcesContent":["'use strict';\nconst tls = require('tls');\n\nmodule.exports = (options = {}, connect = tls.connect) => new Promise((resolve, reject) => {\n\tlet timeout = false;\n\n\tlet socket;\n\n\tconst callback = async () => {\n\t\tawait socketPromise;\n\n\t\tsocket.off('timeout', onTimeout);\n\t\tsocket.off('error', reject);\n\n\t\tif (options.resolveSocket) {\n\t\t\tresolve({alpnProtocol: socket.alpnProtocol, socket, timeout});\n\n\t\t\tif (timeout) {\n\t\t\t\tawait Promise.resolve();\n\t\t\t\tsocket.emit('timeout');\n\t\t\t}\n\t\t} else {\n\t\t\tsocket.destroy();\n\t\t\tresolve({alpnProtocol: socket.alpnProtocol, timeout});\n\t\t}\n\t};\n\n\tconst onTimeout = async () => {\n\t\ttimeout = true;\n\t\tcallback();\n\t};\n\n\tconst socketPromise = (async () => {\n\t\ttry {\n\t\t\tsocket = await connect(options, callback);\n\n\t\t\tsocket.on('error', reject);\n\t\t\tsocket.once('timeout', onTimeout);\n\t\t} catch (error) {\n\t\t\treject(error);\n\t\t}\n\t})();\n});\n"],"mappings":"AAAA,YAAY;;AACZ,MAAMA,GAAG,GAAGC,OAAO,CAAC,KAAK,CAAC;AAE1BC,MAAM,CAACC,OAAO,GAAG,CAACC,OAAO,GAAG,CAAC,CAAC,EAAEC,OAAO,GAAGL,GAAG,CAACK,OAAO,KAAK,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;EAC1F,IAAIC,OAAO,GAAG,KAAK;EAEnB,IAAIC,MAAM;EAEV,MAAMC,QAAQ,GAAG,MAAAA,CAAA,KAAY;IAC5B,MAAMC,aAAa;IAEnBF,MAAM,CAACG,GAAG,CAAC,SAAS,EAAEC,SAAS,CAAC;IAChCJ,MAAM,CAACG,GAAG,CAAC,OAAO,EAAEL,MAAM,CAAC;IAE3B,IAAIJ,OAAO,CAACW,aAAa,EAAE;MAC1BR,OAAO,CAAC;QAACS,YAAY,EAAEN,MAAM,CAACM,YAAY;QAAEN,MAAM;QAAED;MAAO,CAAC,CAAC;MAE7D,IAAIA,OAAO,EAAE;QACZ,MAAMH,OAAO,CAACC,OAAO,CAAC,CAAC;QACvBG,MAAM,CAACO,IAAI,CAAC,SAAS,CAAC;MACvB;IACD,CAAC,MAAM;MACNP,MAAM,CAACQ,OAAO,CAAC,CAAC;MAChBX,OAAO,CAAC;QAACS,YAAY,EAAEN,MAAM,CAACM,YAAY;QAAEP;MAAO,CAAC,CAAC;IACtD;EACD,CAAC;EAED,MAAMK,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC7BL,OAAO,GAAG,IAAI;IACdE,QAAQ,CAAC,CAAC;EACX,CAAC;EAED,MAAMC,aAAa,GAAG,CAAC,YAAY;IAClC,IAAI;MACHF,MAAM,GAAG,MAAML,OAAO,CAACD,OAAO,EAAEO,QAAQ,CAAC;MAEzCD,MAAM,CAACS,EAAE,CAAC,OAAO,EAAEX,MAAM,CAAC;MAC1BE,MAAM,CAACU,IAAI,CAAC,SAAS,EAAEN,SAAS,CAAC;IAClC,CAAC,CAAC,OAAOO,KAAK,EAAE;MACfb,MAAM,CAACa,KAAK,CAAC;IACd;EACD,CAAC,EAAE,CAAC;AACL,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}