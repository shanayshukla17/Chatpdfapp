{"ast":null,"code":"var _jsxFileName = \"D:\\\\LangChainJS\\\\chatpdf\\\\src\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Zoom from 'react-reveal/Zoom';\nimport './Chat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chat({\n  pdfText\n}) {\n  _s();\n  const [inputValue, setInputValue] = useState('');\n  const [chatHistory, setChatHistory] = useState([]);\n  const handleInputChange = event => {\n    setInputValue(event.target.value);\n  };\n  const handleClick = async () => {\n    // Pass the inputValue to your Chat function or handle it here\n    console.log(\"Input value: \", inputValue);\n    const updatedChatHistory = [...chatHistory, {\n      role: \"user\",\n      parts: [{\n        text: inputValue\n      }]\n    }];\n    setChatHistory(updatedChatHistory);\n    const msg = inputValue;\n    const options = {\n      method: 'POST',\n      body: JSON.stringify({\n        history: chatHistory,\n        message: msg,\n        instruction: pdfText\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    try {\n      const response = await fetch('http://localhost:8000/gemini', options);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.text();\n      console.log(data);\n      // Optionally, update chat history with the response\n      // setChatHistory(updatedChatHistory=>[...updatedChatHistory,{role:\"user\",parts:[{ text: inputValue }]},{role:\"model\",parts:[{ text: data }]}]);\n      setChatHistory(prevChatHistory => [...prevChatHistory, {\n        role: \"user\",\n        parts: [{\n          text: inputValue\n        }]\n      }, {\n        role: \"model\",\n        parts: [{\n          text: data\n        }]\n      }]);\n    } catch (error) {\n      console.error('There has been a problem with your fetch operation:', error);\n    }\n\n    // Clear the input field\n    setInputValue(\"\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main_chat\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-show\",\n        children: chatHistory.map((entry, index) => /*#__PURE__*/_jsxDEV(Zoom, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `chat-message ${entry.role}`,\n            children: entry.parts.map((part, partIndex) => /*#__PURE__*/_jsxDEV(\"span\", {\n              children: part.text\n            }, partIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 29\n            }, this))\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input_div\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"input_field\",\n          value: inputValue,\n          placeholder: \"Hey Google tell me the latest news\",\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"arrow\",\n          onClick: handleClick,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"/send.png\",\n            alt: \"Here\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n}\n_s(Chat, \"AlnTJSS3H40CQt/6unueaBowJJk=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","Zoom","jsxDEV","_jsxDEV","Chat","pdfText","_s","inputValue","setInputValue","chatHistory","setChatHistory","handleInputChange","event","target","value","handleClick","console","log","updatedChatHistory","role","parts","text","msg","options","method","body","JSON","stringify","history","message","instruction","headers","response","fetch","ok","Error","data","prevChatHistory","error","className","children","map","entry","index","part","partIndex","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","onChange","onClick","src","alt","_c","$RefreshReg$"],"sources":["D:/LangChainJS/chatpdf/src/Chat.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Zoom from 'react-reveal/Zoom';\r\nimport './Chat.css';\r\n\r\nfunction Chat({ pdfText }) {\r\n    const [inputValue, setInputValue] = useState('');\r\n    const [chatHistory, setChatHistory] = useState([]);\r\n\r\n    const handleInputChange = (event) => {\r\n        setInputValue(event.target.value);\r\n    };\r\n\r\n    const handleClick = async () => {\r\n        // Pass the inputValue to your Chat function or handle it here\r\n        console.log(\"Input value: \", inputValue);\r\n\r\n        const updatedChatHistory = [\r\n            ...chatHistory,\r\n            { role: \"user\", parts: [{ text: inputValue }] },\r\n        ];\r\n        setChatHistory(updatedChatHistory);\r\n        \r\n        const msg = inputValue;\r\n        const options = {\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n                history: chatHistory,\r\n                message: msg,\r\n                instruction:pdfText\r\n            }),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        };\r\n\r\n        try {\r\n            const response = await fetch('http://localhost:8000/gemini', options);\r\n            if (!response.ok) {\r\n                throw new Error('Network response was not ok');\r\n            }\r\n            const data = await response.text();\r\n            console.log(data)\r\n            // Optionally, update chat history with the response\r\n            // setChatHistory(updatedChatHistory=>[...updatedChatHistory,{role:\"user\",parts:[{ text: inputValue }]},{role:\"model\",parts:[{ text: data }]}]);\r\n            setChatHistory(prevChatHistory => [...prevChatHistory, { role: \"user\", parts: [{ text: inputValue }] }, { role: \"model\", parts: [{ text: data }] }]);\r\n        } catch (error) {\r\n            console.error('There has been a problem with your fetch operation:', error);\r\n        }\r\n\r\n        // Clear the input field\r\n        setInputValue(\"\");\r\n    };\r\n\r\n    return (\r\n        <div className=\"main_chat\">\r\n            <div className=\"chat-box\">\r\n                <div className=\"chat-show\">\r\n                {chatHistory.map((entry, index) => (\r\n                    <Zoom>\r\n                        <div key={index} className={`chat-message ${entry.role}`}>\r\n                        {entry.parts.map((part, partIndex) => (\r\n                            <span key={partIndex}>{part.text}</span>\r\n                        ))}\r\n                        </div>\r\n                    </Zoom>\r\n                ))}\r\n                </div>\r\n                <div className=\"input_div\">\r\n                    <input \r\n                        className=\"input_field\" \r\n                        value={inputValue} \r\n                        placeholder='Hey Google tell me the latest news'\r\n                        onChange={handleInputChange} \r\n                    />\r\n                    <button className=\"arrow\" onClick={handleClick}>\r\n                        <img src=\"/send.png\" alt='Here' />   \r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}