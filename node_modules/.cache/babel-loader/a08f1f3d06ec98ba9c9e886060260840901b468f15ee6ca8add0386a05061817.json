{"ast":null,"code":"var _jsxFileName = \"D:\\\\LangChainJS\\\\chatpdf\\\\src\\\\Pdfdisp.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './Pdfdisp.css';\nimport { Uploader } from \"uploader\";\nimport { UploadDropzone } from \"react-uploader\";\nimport { extract } from '@extractus/article-extractor';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PdfChat() {\n  _s();\n  const [uploadedFileUrl, setUploadedFileUrl] = useState(\"\");\n  const handleComplete = async files => {\n    if (files.length > 0) {\n      const file = files[0];\n      if (file instanceof Blob) {\n        const reader = new FileReader();\n        reader.onload = async event => {\n          const buffer = event.target.result;\n\n          // Now you can use `buffer` as needed, e.g., pass it to your extraction function\n          const extractedText = await extract(buffer);\n          console.log(extractedText);\n        };\n        reader.readAsArrayBuffer(file);\n      } else {\n        console.error('File is not a Blob.');\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pdf-div\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-heading\",\n      children: \"Welcome to ChatPDF Application\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UploadDropzone, {\n      uploader: Uploader({\n        apiKey: \"public_FW25c5Z7W7hFTqdUY9USFQFpmpMh\"\n      }),\n      options: {\n        multi: true\n      },\n      onUpdate: handleComplete,\n      width: \"600px\",\n      height: \"375px\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n_s(PdfChat, \"9KAwY3NNldGsk3kyMQvrbybw64Y=\");\n_c = PdfChat;\nexport default PdfChat;\nvar _c;\n$RefreshReg$(_c, \"PdfChat\");","map":{"version":3,"names":["React","useState","Uploader","UploadDropzone","extract","jsxDEV","_jsxDEV","PdfChat","_s","uploadedFileUrl","setUploadedFileUrl","handleComplete","files","length","file","Blob","reader","FileReader","onload","event","buffer","target","result","extractedText","console","log","readAsArrayBuffer","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","uploader","apiKey","options","multi","onUpdate","width","height","_c","$RefreshReg$"],"sources":["D:/LangChainJS/chatpdf/src/Pdfdisp.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './Pdfdisp.css';\r\nimport { Uploader } from \"uploader\";\r\nimport { UploadDropzone } from \"react-uploader\";\r\nimport { extract } from '@extractus/article-extractor'\r\n\r\nfunction PdfChat() {\r\n  const [uploadedFileUrl, setUploadedFileUrl] = useState(\"\");\r\n\r\n  const handleComplete = async (files) => {\r\n    if (files.length > 0) {\r\n      const file = files[0];\r\n      if (file instanceof Blob) {\r\n        const reader = new FileReader();\r\n  \r\n        reader.onload = async (event) => {\r\n          const buffer = event.target.result;\r\n          \r\n          // Now you can use `buffer` as needed, e.g., pass it to your extraction function\r\n          const extractedText = await extract(buffer);\r\n          console.log(extractedText);\r\n        };\r\n  \r\n        reader.readAsArrayBuffer(file);\r\n      } else {\r\n        console.error('File is not a Blob.');\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"pdf-div\">\r\n      <div className=\"main-heading\">Welcome to ChatPDF Application</div>\r\n      <UploadDropzone\r\n        uploader={Uploader({ apiKey: \"public_FW25c5Z7W7hFTqdUY9USFQFpmpMh\"})}\r\n        options={{ multi: true }}\r\n        onUpdate={handleComplete}\r\n        width=\"600px\"\r\n        height=\"375px\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PdfChat;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,eAAe;AACtB,SAASC,QAAQ,QAAQ,UAAU;AACnC,SAASC,cAAc,QAAQ,gBAAgB;AAC/C,SAASC,OAAO,QAAQ,8BAA8B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEtD,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE1D,MAAMU,cAAc,GAAG,MAAOC,KAAK,IAAK;IACtC,IAAIA,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;MACpB,MAAMC,IAAI,GAAGF,KAAK,CAAC,CAAC,CAAC;MACrB,IAAIE,IAAI,YAAYC,IAAI,EAAE;QACxB,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;QAE/BD,MAAM,CAACE,MAAM,GAAG,MAAOC,KAAK,IAAK;UAC/B,MAAMC,MAAM,GAAGD,KAAK,CAACE,MAAM,CAACC,MAAM;;UAElC;UACA,MAAMC,aAAa,GAAG,MAAMnB,OAAO,CAACgB,MAAM,CAAC;UAC3CI,OAAO,CAACC,GAAG,CAACF,aAAa,CAAC;QAC5B,CAAC;QAEDP,MAAM,CAACU,iBAAiB,CAACZ,IAAI,CAAC;MAChC,CAAC,MAAM;QACLU,OAAO,CAACG,KAAK,CAAC,qBAAqB,CAAC;MACtC;IACF;EACF,CAAC;EAED,oBACErB,OAAA;IAAKsB,SAAS,EAAC,SAAS;IAAAC,QAAA,gBACtBvB,OAAA;MAAKsB,SAAS,EAAC,cAAc;MAAAC,QAAA,EAAC;IAA8B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAClE3B,OAAA,CAACH,cAAc;MACb+B,QAAQ,EAAEhC,QAAQ,CAAC;QAAEiC,MAAM,EAAE;MAAqC,CAAC,CAAE;MACrEC,OAAO,EAAE;QAAEC,KAAK,EAAE;MAAK,CAAE;MACzBC,QAAQ,EAAE3B,cAAe;MACzB4B,KAAK,EAAC,OAAO;MACbC,MAAM,EAAC;IAAO;MAAAV,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACf,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACzB,EAAA,CApCQD,OAAO;AAAAkC,EAAA,GAAPlC,OAAO;AAsChB,eAAeA,OAAO;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}