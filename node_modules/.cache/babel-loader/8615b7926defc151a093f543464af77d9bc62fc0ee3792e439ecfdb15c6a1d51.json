{"ast":null,"code":"'use strict';\n\nconst tls = require('tls');\nconst http = require('http');\nconst https = require('https');\nconst JSStreamSocket = require('../utils/js-stream-socket.js');\nconst {\n  globalAgent\n} = require('../agent.js');\nconst UnexpectedStatusCodeError = require('./unexpected-status-code-error.js');\nconst initialize = require('./initialize.js');\nconst getAuthorizationHeaders = require('./get-auth-headers.js');\nconst createConnection = (self, options, callback) => {\n  (async () => {\n    try {\n      const {\n        proxyOptions\n      } = self;\n      const {\n        url,\n        headers,\n        raw\n      } = proxyOptions;\n      const stream = await globalAgent.request(url, proxyOptions, {\n        ...getAuthorizationHeaders(self),\n        ...headers,\n        ':method': 'CONNECT',\n        ':authority': `${options.host}:${options.port}`\n      });\n      stream.once('error', callback);\n      stream.once('response', headers => {\n        const statusCode = headers[':status'];\n        if (statusCode !== 200) {\n          callback(new UnexpectedStatusCodeError(statusCode, ''));\n          return;\n        }\n        const encrypted = self instanceof https.Agent;\n        if (raw && encrypted) {\n          options.socket = stream;\n          const secureStream = tls.connect(options);\n          secureStream.once('close', () => {\n            stream.destroy();\n          });\n          callback(null, secureStream);\n          return;\n        }\n        const socket = new JSStreamSocket(stream);\n        socket.encrypted = false;\n        socket._handle.getpeername = out => {\n          out.family = undefined;\n          out.address = undefined;\n          out.port = undefined;\n        };\n        callback(null, socket);\n      });\n    } catch (error) {\n      callback(error);\n    }\n  })();\n};\nclass HttpOverHttp2 extends http.Agent {\n  constructor(options) {\n    super(options);\n    initialize(this, options.proxyOptions);\n  }\n  createConnection(options, callback) {\n    createConnection(this, options, callback);\n  }\n}\nclass HttpsOverHttp2 extends https.Agent {\n  constructor(options) {\n    super(options);\n    initialize(this, options.proxyOptions);\n  }\n  createConnection(options, callback) {\n    createConnection(this, options, callback);\n  }\n}\nmodule.exports = {\n  HttpOverHttp2,\n  HttpsOverHttp2\n};","map":{"version":3,"names":["tls","require","http","https","JSStreamSocket","globalAgent","UnexpectedStatusCodeError","initialize","getAuthorizationHeaders","createConnection","self","options","callback","proxyOptions","url","headers","raw","stream","request","host","port","once","statusCode","encrypted","Agent","socket","secureStream","connect","destroy","_handle","getpeername","out","family","undefined","address","error","HttpOverHttp2","constructor","HttpsOverHttp2","module","exports"],"sources":["D:/LangChainJS/chatpdf/node_modules/http2-wrapper/source/proxies/h1-over-h2.js"],"sourcesContent":["'use strict';\nconst tls = require('tls');\nconst http = require('http');\nconst https = require('https');\nconst JSStreamSocket = require('../utils/js-stream-socket.js');\nconst {globalAgent} = require('../agent.js');\nconst UnexpectedStatusCodeError = require('./unexpected-status-code-error.js');\nconst initialize = require('./initialize.js');\nconst getAuthorizationHeaders = require('./get-auth-headers.js');\n\nconst createConnection = (self, options, callback) => {\n\t(async () => {\n\t\ttry {\n\t\t\tconst {proxyOptions} = self;\n\t\t\tconst {url, headers, raw} = proxyOptions;\n\n\t\t\tconst stream = await globalAgent.request(url, proxyOptions, {\n\t\t\t\t...getAuthorizationHeaders(self),\n\t\t\t\t...headers,\n\t\t\t\t':method': 'CONNECT',\n\t\t\t\t':authority': `${options.host}:${options.port}`\n\t\t\t});\n\n\t\t\tstream.once('error', callback);\n\t\t\tstream.once('response', headers => {\n\t\t\t\tconst statusCode = headers[':status'];\n\n\t\t\t\tif (statusCode !== 200) {\n\t\t\t\t\tcallback(new UnexpectedStatusCodeError(statusCode, ''));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst encrypted = self instanceof https.Agent;\n\n\t\t\t\tif (raw && encrypted) {\n\t\t\t\t\toptions.socket = stream;\n\t\t\t\t\tconst secureStream = tls.connect(options);\n\n\t\t\t\t\tsecureStream.once('close', () => {\n\t\t\t\t\t\tstream.destroy();\n\t\t\t\t\t});\n\n\t\t\t\t\tcallback(null, secureStream);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst socket = new JSStreamSocket(stream);\n\t\t\t\tsocket.encrypted = false;\n\t\t\t\tsocket._handle.getpeername = out => {\n\t\t\t\t\tout.family = undefined;\n\t\t\t\t\tout.address = undefined;\n\t\t\t\t\tout.port = undefined;\n\t\t\t\t};\n\n\t\t\t\tcallback(null, socket);\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tcallback(error);\n\t\t}\n\t})();\n};\n\nclass HttpOverHttp2 extends http.Agent {\n\tconstructor(options) {\n\t\tsuper(options);\n\n\t\tinitialize(this, options.proxyOptions);\n\t}\n\n\tcreateConnection(options, callback) {\n\t\tcreateConnection(this, options, callback);\n\t}\n}\n\nclass HttpsOverHttp2 extends https.Agent {\n\tconstructor(options) {\n\t\tsuper(options);\n\n\t\tinitialize(this, options.proxyOptions);\n\t}\n\n\tcreateConnection(options, callback) {\n\t\tcreateConnection(this, options, callback);\n\t}\n}\n\nmodule.exports = {\n\tHttpOverHttp2,\n\tHttpsOverHttp2\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}