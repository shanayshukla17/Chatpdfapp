{"ast":null,"code":"/*jshint strict:true node:true es5:true onevar:true laxcomma:true laxbreak:true*/\n(function () {\n  \"use strict\";\n\n  // \"FIFO\" isn't easy to convert to camelCase and back reliably\n  var isFnodeTypes = [\"isFile\", \"isDirectory\", \"isSymbolicLink\", \"isBlockDevice\", \"isCharacterDevice\", \"isFIFO\", \"isSocket\"],\n    fnodeTypes = [\"file\", \"directory\", \"symbolicLink\", \"blockDevice\", \"characterDevice\", \"FIFO\", \"socket\"],\n    fnodeTypesPlural = [\"files\", \"directories\", \"symbolicLinks\", \"blockDevices\", \"characterDevices\", \"FIFOs\", \"sockets\"];\n\n  // \n  function createNodeGroups() {\n    var nodeGroups = {};\n    fnodeTypesPlural.concat(\"nodes\", \"errors\").forEach(function (fnodeTypePlural) {\n      nodeGroups[fnodeTypePlural] = [];\n    });\n    return nodeGroups;\n  }\n\n  // Determine each file node's type\n  // \n  function sortFnodesByType(stat, fnodes) {\n    var i, isType;\n    for (i = 0; i < isFnodeTypes.length; i += 1) {\n      isType = isFnodeTypes[i];\n      if (stat[isType]()) {\n        stat.type = fnodeTypes[i];\n        fnodes[fnodeTypesPlural[i]].push(stat);\n        return;\n      }\n    }\n  }\n\n  // Get the current number of listeners (which may change)\n  // Emit events to each listener\n  // Wait for all listeners to `next()` before continueing\n  // (in theory this may avoid disk thrashing)\n  function emitSingleEvents(emitter, path, stats, next, self) {\n    var num = 1 + emitter.listeners(stats.type).length + emitter.listeners(\"node\").length;\n    function nextWhenReady() {\n      num -= 1;\n      if (0 === num) {\n        next.call(self);\n      }\n    }\n    emitter.emit(stats.type, path, stats, nextWhenReady);\n    emitter.emit(\"node\", path, stats, nextWhenReady);\n    nextWhenReady();\n  }\n\n  // Since the risk for disk thrashing among anything\n  // other than files is relatively low, all types are\n  // emitted at once, but all must complete before advancing\n  function emitPluralEvents(emitter, path, nodes, next, self) {\n    var num = 1;\n    function nextWhenReady() {\n      num -= 1;\n      if (0 === num) {\n        next.call(self);\n      }\n    }\n    fnodeTypesPlural.concat([\"nodes\", \"errors\"]).forEach(function (fnodeType) {\n      if (0 === nodes[fnodeType].length) {\n        return;\n      }\n      num += emitter.listeners(fnodeType).length;\n      emitter.emit(fnodeType, path, nodes[fnodeType], nextWhenReady);\n    });\n    nextWhenReady();\n  }\n  module.exports = {\n    emitNodeType: emitSingleEvents,\n    emitNodeTypeGroups: emitPluralEvents,\n    isFnodeTypes: isFnodeTypes,\n    fnodeTypes: fnodeTypes,\n    fnodeTypesPlural: fnodeTypesPlural,\n    sortFnodesByType: sortFnodesByType,\n    createNodeGroups: createNodeGroups\n  };\n})();","map":{"version":3,"names":["isFnodeTypes","fnodeTypes","fnodeTypesPlural","createNodeGroups","nodeGroups","concat","forEach","fnodeTypePlural","sortFnodesByType","stat","fnodes","i","isType","length","type","push","emitSingleEvents","emitter","path","stats","next","self","num","listeners","nextWhenReady","call","emit","emitPluralEvents","nodes","fnodeType","module","exports","emitNodeType","emitNodeTypeGroups"],"sources":["D:/LangChainJS/chatpdf/node_modules/walk/node-type-emitter.js"],"sourcesContent":["/*jshint strict:true node:true es5:true onevar:true laxcomma:true laxbreak:true*/\n(function () {\n  \"use strict\";\n\n  // \"FIFO\" isn't easy to convert to camelCase and back reliably\n  var isFnodeTypes = [\n      \"isFile\", \"isDirectory\",  \"isSymbolicLink\", \"isBlockDevice\",  \"isCharacterDevice\", \"isFIFO\", \"isSocket\"\n    ],\n    fnodeTypes = [\n      \"file\",   \"directory\",    \"symbolicLink\",   \"blockDevice\",    \"characterDevice\",    \"FIFO\",   \"socket\"\n    ],\n    fnodeTypesPlural = [\n      \"files\",  \"directories\",  \"symbolicLinks\",  \"blockDevices\",   \"characterDevices\",   \"FIFOs\",  \"sockets\"\n    ];\n\n\n  // \n  function createNodeGroups() {\n    var nodeGroups = {};\n    fnodeTypesPlural.concat(\"nodes\", \"errors\").forEach(function (fnodeTypePlural) {\n      nodeGroups[fnodeTypePlural] = [];\n    });\n    return nodeGroups;\n  }\n\n\n  // Determine each file node's type\n  // \n  function sortFnodesByType(stat, fnodes) {\n    var i, isType;\n\n    for (i = 0; i < isFnodeTypes.length; i += 1) {\n      isType = isFnodeTypes[i];\n      if (stat[isType]()) {\n        stat.type = fnodeTypes[i];\n        fnodes[fnodeTypesPlural[i]].push(stat);\n        return;\n      }\n    }\n  }\n\n\n  // Get the current number of listeners (which may change)\n  // Emit events to each listener\n  // Wait for all listeners to `next()` before continueing\n  // (in theory this may avoid disk thrashing)\n  function emitSingleEvents(emitter, path, stats, next, self) {\n    var num = 1 + emitter.listeners(stats.type).length + emitter.listeners(\"node\").length;\n\n    function nextWhenReady() {\n      num -= 1;\n      if (0 === num) { next.call(self); }\n    }\n\n    emitter.emit(stats.type, path, stats, nextWhenReady);\n    emitter.emit(\"node\", path, stats, nextWhenReady);\n    nextWhenReady();\n  }\n\n\n  // Since the risk for disk thrashing among anything\n  // other than files is relatively low, all types are\n  // emitted at once, but all must complete before advancing\n  function emitPluralEvents(emitter, path, nodes, next, self) {\n    var num = 1;\n\n    function nextWhenReady() {\n      num -= 1;\n      if (0 === num) { next.call(self); }\n    }\n\n    fnodeTypesPlural.concat([\"nodes\", \"errors\"]).forEach(function (fnodeType) {\n      if (0 === nodes[fnodeType].length) { return; }\n      num += emitter.listeners(fnodeType).length;\n      emitter.emit(fnodeType, path, nodes[fnodeType], nextWhenReady);\n    });\n    nextWhenReady();\n  }\n\n  module.exports = {\n    emitNodeType: emitSingleEvents,\n    emitNodeTypeGroups: emitPluralEvents,\n    isFnodeTypes: isFnodeTypes,\n    fnodeTypes: fnodeTypes,\n    fnodeTypesPlural: fnodeTypesPlural,\n    sortFnodesByType: sortFnodesByType,\n    createNodeGroups: createNodeGroups\n  };\n}());\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}