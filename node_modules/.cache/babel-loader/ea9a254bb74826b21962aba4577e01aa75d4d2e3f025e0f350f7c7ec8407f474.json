{"ast":null,"code":"var _jsxFileName = \"D:\\\\LangChainJS\\\\chatpdf\\\\src\\\\Pdfdisp.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Pdfdisp.css';\nimport { Uploader } from \"uploader\";\nimport { UploadDropzone } from \"react-uploader\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TypewriterText({\n  text\n}) {\n  _s();\n  const [displayText, setDisplayText] = useState('');\n  useEffect(() => {\n    let index = 0;\n    const intervalId = setInterval(() => {\n      setDisplayText(prevText => prevText + text[index]);\n      index++;\n      if (index === text.length) clearInterval(intervalId);\n    }, 40); // Adjust the speed of typing by changing the interval duration\n    return () => clearInterval(intervalId);\n  }, [text]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"typewriter-text\",\n    children: displayText\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 10\n  }, this);\n}\n_s(TypewriterText, \"Z72AqRalvcuvuUyHd5OLwsN/cpk=\");\n_c = TypewriterText;\nfunction PdfChat({\n  setInitialResponse,\n  chatHistory\n}) {\n  _s2();\n  const [uploadedFileUrl, setUploadedFileUrl] = useState(\"\");\n  const [extractedText, setExtractedText] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const handleComplete = async files => {\n    if (files.length > 0) {\n      const input = files[files.length() - 1].fileUrl;\n      console.log(input);\n      setUploadedFileUrl(input);\n      try {\n        setIsLoading(true);\n        const data = {\n          \"url\": input,\n          \"inline\": true,\n          \"async\": false\n        };\n        const response = await axios.post('https://api.pdf.co/v1/pdf/convert/to/text-simple', data, {\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n            'x-api-key': 'shanayshukla.7642@gmail.com_Ouwsgk7QtJIm9X5cklJM6kA1zYwiV1e7flAyxTtum913usLs3f4Z52Lq1uv9vu4R'\n          }\n        });\n        if (response.status === 200 && response.data && response.data.body) {\n          const extractedText = response.data.body;\n          console.log('Extracted text:', extractedText);\n          const instruction = `ONLY ANSWER QUESTIONS RELATED TO THE FOLLOWING PDF CONTENT: ${extractedText}`;\n          const message = 'GIVE 4 QESTIONS THAT THE USER SHOULD ASK YOU FROM THE DOC GIVEN';\n          // console.log('Instruction:', instruction);\n          setExtractedText(extractedText);\n          const options = {\n            method: 'POST',\n            body: JSON.stringify({\n              message: message,\n              instruction: instruction,\n              chatHistory: chatHistory\n            }),\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          };\n          try {\n            const response = await fetch('http://localhost:8000/gemini/system', options);\n            if (!response.ok) {\n              throw new Error('Network response was not ok');\n            } else {\n              const data = await response.json();\n              setInitialResponse(data.initialResponse); // Update initial response\n            }\n          } catch (error) {\n            console.error('There has been a problem with your fetch operation:', error);\n          }\n        } else {\n          console.error('Error: Invalid response received from the API');\n        }\n      } catch (error) {\n        console.error('Error fetching PDF text:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pdf-div\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-heading\",\n      children: \"Welcome to Chat PDF Application\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UploadDropzone, {\n      uploader: Uploader({\n        apiKey: \"public_W142ifRGLpJgfgvwuetqW7YKRptZ\"\n      }),\n      options: {\n        multi: true\n      },\n      onUpdate: handleComplete,\n      width: \"450px\",\n      height: \"375px\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n_s2(PdfChat, \"CkwVH5L9G5Z0HXW+PWdQ2vq20vc=\");\n_c2 = PdfChat;\nexport default PdfChat;\nvar _c, _c2;\n$RefreshReg$(_c, \"TypewriterText\");\n$RefreshReg$(_c2, \"PdfChat\");","map":{"version":3,"names":["React","useState","useEffect","Uploader","UploadDropzone","axios","jsxDEV","_jsxDEV","TypewriterText","text","_s","displayText","setDisplayText","index","intervalId","setInterval","prevText","length","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","PdfChat","setInitialResponse","chatHistory","_s2","uploadedFileUrl","setUploadedFileUrl","extractedText","setExtractedText","isLoading","setIsLoading","handleComplete","files","input","fileUrl","console","log","data","response","post","headers","status","body","instruction","message","options","method","JSON","stringify","fetch","ok","Error","json","initialResponse","error","uploader","apiKey","multi","onUpdate","width","height","_c2","$RefreshReg$"],"sources":["D:/LangChainJS/chatpdf/src/Pdfdisp.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Pdfdisp.css';\r\nimport { Uploader } from \"uploader\";\r\nimport { UploadDropzone } from \"react-uploader\";\r\nimport axios from 'axios';\r\n\r\nfunction TypewriterText({ text }) {\r\n  const [displayText, setDisplayText] = useState('');\r\n\r\n  useEffect(() => {\r\n    let index = 0;\r\n    const intervalId = setInterval(() => {\r\n      setDisplayText((prevText) => prevText + text[index]);\r\n      index++;\r\n      if (index === text.length) clearInterval(intervalId);\r\n    }, 40); // Adjust the speed of typing by changing the interval duration\r\n    return () => clearInterval(intervalId);\r\n  }, [text]);\r\n\r\n  return <div className=\"typewriter-text\">{displayText}</div>;\r\n}\r\n\r\nfunction PdfChat({setInitialResponse,chatHistory}) {\r\n  const [uploadedFileUrl, setUploadedFileUrl] = useState(\"\");\r\n  const [extractedText, setExtractedText] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const handleComplete = async (files) => {\r\n    if (files.length > 0) {\r\n      const input = files[files.length()-1].fileUrl;\r\n      console.log(input);\r\n      setUploadedFileUrl(input);\r\n  \r\n      try {\r\n        setIsLoading(true);\r\n        const data = {\r\n          \"url\": input,\r\n          \"inline\": true,\r\n          \"async\": false\r\n        };\r\n  \r\n        const response = await axios.post('https://api.pdf.co/v1/pdf/convert/to/text-simple', data, {\r\n          headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'x-api-key': 'shanayshukla.7642@gmail.com_Ouwsgk7QtJIm9X5cklJM6kA1zYwiV1e7flAyxTtum913usLs3f4Z52Lq1uv9vu4R'\r\n          }\r\n        });\r\n  \r\n        if (response.status === 200 && response.data && response.data.body) {\r\n          const extractedText = response.data.body;\r\n          console.log('Extracted text:', extractedText);\r\n          const instruction = `ONLY ANSWER QUESTIONS RELATED TO THE FOLLOWING PDF CONTENT: ${extractedText}`;\r\n          const message='GIVE 4 QESTIONS THAT THE USER SHOULD ASK YOU FROM THE DOC GIVEN';\r\n          // console.log('Instruction:', instruction);\r\n          setExtractedText(extractedText);\r\n  \r\n          const options = {\r\n            method: 'POST',\r\n            body: JSON.stringify({ message:message,instruction:instruction,chatHistory:chatHistory}),\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n            }\r\n          };\r\n  \r\n          try {\r\n            const response = await fetch('http://localhost:8000/gemini/system', options);\r\n            if (!response.ok) {\r\n              throw new Error('Network response was not ok');\r\n            } else {\r\n              const data = await response.json();\r\n              setInitialResponse(data.initialResponse);  // Update initial response\r\n            }\r\n          } catch (error) {\r\n            console.error('There has been a problem with your fetch operation:', error);\r\n          }\r\n        } else {\r\n          console.error('Error: Invalid response received from the API');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching PDF text:', error);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"pdf-div\">\r\n      <div className=\"main-heading\">\r\n        Welcome to Chat PDF Application\r\n      </div>\r\n      <UploadDropzone\r\n        uploader={Uploader({ apiKey: \"public_W142ifRGLpJgfgvwuetqW7YKRptZ\"})}\r\n        options={{ multi: true }}\r\n        onUpdate={handleComplete}\r\n        width=\"450px\"\r\n        height=\"375px\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PdfChat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}