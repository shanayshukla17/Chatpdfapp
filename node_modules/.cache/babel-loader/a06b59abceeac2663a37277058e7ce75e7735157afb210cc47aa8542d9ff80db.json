{"ast":null,"code":"'use strict';\n\n// See https://github.com/facebook/jest/issues/2549\n// eslint-disable-next-line node/prefer-global/url\nconst {\n  URL,\n  urlToHttpOptions\n} = require('url');\nconst http = require('http');\nconst https = require('https');\nconst resolveALPN = require('resolve-alpn');\nconst QuickLRU = require('quick-lru');\nconst {\n  Agent,\n  globalAgent\n} = require('./agent.js');\nconst Http2ClientRequest = require('./client-request.js');\nconst calculateServerName = require('./utils/calculate-server-name.js');\nconst delayAsyncDestroy = require('./utils/delay-async-destroy.js');\nconst cache = new QuickLRU({\n  maxSize: 100\n});\nconst queue = new Map();\nconst installSocket = (agent, socket, options) => {\n  socket._httpMessage = {\n    shouldKeepAlive: true\n  };\n  const onFree = () => {\n    agent.emit('free', socket, options);\n  };\n  socket.on('free', onFree);\n  const onClose = () => {\n    agent.removeSocket(socket, options);\n  };\n  socket.on('close', onClose);\n  const onTimeout = () => {\n    const {\n      freeSockets\n    } = agent;\n    for (const sockets of Object.values(freeSockets)) {\n      if (sockets.includes(socket)) {\n        socket.destroy();\n        return;\n      }\n    }\n  };\n  socket.on('timeout', onTimeout);\n  const onRemove = () => {\n    agent.removeSocket(socket, options);\n    socket.off('close', onClose);\n    socket.off('free', onFree);\n    socket.off('timeout', onTimeout);\n    socket.off('agentRemove', onRemove);\n  };\n  socket.on('agentRemove', onRemove);\n  agent.emit('free', socket, options);\n};\nconst createResolveProtocol = (cache, queue = new Map(), connect = undefined) => {\n  return async options => {\n    const name = `${options.host}:${options.port}:${options.ALPNProtocols.sort()}`;\n    if (!cache.has(name)) {\n      if (queue.has(name)) {\n        const result = await queue.get(name);\n        return {\n          alpnProtocol: result.alpnProtocol\n        };\n      }\n      const {\n        path\n      } = options;\n      options.path = options.socketPath;\n      const resultPromise = resolveALPN(options, connect);\n      queue.set(name, resultPromise);\n      try {\n        const result = await resultPromise;\n        cache.set(name, result.alpnProtocol);\n        queue.delete(name);\n        options.path = path;\n        return result;\n      } catch (error) {\n        queue.delete(name);\n        options.path = path;\n        throw error;\n      }\n    }\n    return {\n      alpnProtocol: cache.get(name)\n    };\n  };\n};\nconst defaultResolveProtocol = createResolveProtocol(cache, queue);\nmodule.exports = async (input, options, callback) => {\n  if (typeof input === 'string') {\n    input = urlToHttpOptions(new URL(input));\n  } else if (input instanceof URL) {\n    input = urlToHttpOptions(input);\n  } else {\n    input = {\n      ...input\n    };\n  }\n  if (typeof options === 'function' || options === undefined) {\n    // (options, callback)\n    callback = options;\n    options = input;\n  } else {\n    // (input, options, callback)\n    options = Object.assign(input, options);\n  }\n  options.ALPNProtocols = options.ALPNProtocols || ['h2', 'http/1.1'];\n  if (!Array.isArray(options.ALPNProtocols) || options.ALPNProtocols.length === 0) {\n    throw new Error('The `ALPNProtocols` option must be an Array with at least one entry');\n  }\n  options.protocol = options.protocol || 'https:';\n  const isHttps = options.protocol === 'https:';\n  options.host = options.hostname || options.host || 'localhost';\n  options.session = options.tlsSession;\n  options.servername = options.servername || calculateServerName(options.headers && options.headers.host || options.host);\n  options.port = options.port || (isHttps ? 443 : 80);\n  options._defaultAgent = isHttps ? https.globalAgent : http.globalAgent;\n  const resolveProtocol = options.resolveProtocol || defaultResolveProtocol;\n\n  // Note: We don't support `h2session` here\n\n  let {\n    agent\n  } = options;\n  if (agent !== undefined && agent !== false && agent.constructor.name !== 'Object') {\n    throw new Error('The `options.agent` can be only an object `http`, `https` or `http2` properties');\n  }\n  if (isHttps) {\n    options.resolveSocket = true;\n    let {\n      socket,\n      alpnProtocol,\n      timeout\n    } = await resolveProtocol(options);\n    if (timeout) {\n      if (socket) {\n        socket.destroy();\n      }\n      const error = new Error(`Timed out resolving ALPN: ${options.timeout} ms`);\n      error.code = 'ETIMEDOUT';\n      error.ms = options.timeout;\n      throw error;\n    }\n\n    // We can't accept custom `createConnection` because the API is different for HTTP/2\n    if (socket && options.createConnection) {\n      socket.destroy();\n      socket = undefined;\n    }\n    delete options.resolveSocket;\n    const isHttp2 = alpnProtocol === 'h2';\n    if (agent) {\n      agent = isHttp2 ? agent.http2 : agent.https;\n      options.agent = agent;\n    }\n    if (agent === undefined) {\n      agent = isHttp2 ? globalAgent : https.globalAgent;\n    }\n    if (socket) {\n      if (agent === false) {\n        socket.destroy();\n      } else {\n        const defaultCreateConnection = (isHttp2 ? Agent : https.Agent).prototype.createConnection;\n        if (agent.createConnection === defaultCreateConnection) {\n          if (isHttp2) {\n            options._reuseSocket = socket;\n          } else {\n            installSocket(agent, socket, options);\n          }\n        } else {\n          socket.destroy();\n        }\n      }\n    }\n    if (isHttp2) {\n      return delayAsyncDestroy(new Http2ClientRequest(options, callback));\n    }\n  } else if (agent) {\n    options.agent = agent.http;\n  }\n\n  // If we're sending HTTP/1.1, handle any explicitly set H2 headers in the options:\n  if (options.headers) {\n    options.headers = {\n      ...options.headers\n    };\n\n    // :authority is equivalent to the HTTP/1.1 host header\n    if (options.headers[':authority']) {\n      if (!options.headers.host) {\n        options.headers.host = options.headers[':authority'];\n      }\n      delete options.headers[':authority'];\n    }\n\n    // Remove other HTTP/2 headers as they have their counterparts in the options\n    delete options.headers[':method'];\n    delete options.headers[':scheme'];\n    delete options.headers[':path'];\n  }\n  return delayAsyncDestroy(http.request(options, callback));\n};\nmodule.exports.protocolCache = cache;\nmodule.exports.resolveProtocol = defaultResolveProtocol;\nmodule.exports.createResolveProtocol = createResolveProtocol;","map":{"version":3,"names":["URL","urlToHttpOptions","require","http","https","resolveALPN","QuickLRU","Agent","globalAgent","Http2ClientRequest","calculateServerName","delayAsyncDestroy","cache","maxSize","queue","Map","installSocket","agent","socket","options","_httpMessage","shouldKeepAlive","onFree","emit","on","onClose","removeSocket","onTimeout","freeSockets","sockets","Object","values","includes","destroy","onRemove","off","createResolveProtocol","connect","undefined","name","host","port","ALPNProtocols","sort","has","result","get","alpnProtocol","path","socketPath","resultPromise","set","delete","error","defaultResolveProtocol","module","exports","input","callback","assign","Array","isArray","length","Error","protocol","isHttps","hostname","session","tlsSession","servername","headers","_defaultAgent","resolveProtocol","constructor","resolveSocket","timeout","code","ms","createConnection","isHttp2","http2","defaultCreateConnection","prototype","_reuseSocket","request","protocolCache"],"sources":["D:/LangChainJS/chatpdf/node_modules/http2-wrapper/source/auto.js"],"sourcesContent":["'use strict';\n// See https://github.com/facebook/jest/issues/2549\n// eslint-disable-next-line node/prefer-global/url\nconst {URL, urlToHttpOptions} = require('url');\nconst http = require('http');\nconst https = require('https');\nconst resolveALPN = require('resolve-alpn');\nconst QuickLRU = require('quick-lru');\nconst {Agent, globalAgent} = require('./agent.js');\nconst Http2ClientRequest = require('./client-request.js');\nconst calculateServerName = require('./utils/calculate-server-name.js');\nconst delayAsyncDestroy = require('./utils/delay-async-destroy.js');\n\nconst cache = new QuickLRU({maxSize: 100});\nconst queue = new Map();\n\nconst installSocket = (agent, socket, options) => {\n\tsocket._httpMessage = {shouldKeepAlive: true};\n\n\tconst onFree = () => {\n\t\tagent.emit('free', socket, options);\n\t};\n\n\tsocket.on('free', onFree);\n\n\tconst onClose = () => {\n\t\tagent.removeSocket(socket, options);\n\t};\n\n\tsocket.on('close', onClose);\n\n\tconst onTimeout = () => {\n\t\tconst {freeSockets} = agent;\n\n\t\tfor (const sockets of Object.values(freeSockets)) {\n\t\t\tif (sockets.includes(socket)) {\n\t\t\t\tsocket.destroy();\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t};\n\n\tsocket.on('timeout', onTimeout);\n\n\tconst onRemove = () => {\n\t\tagent.removeSocket(socket, options);\n\t\tsocket.off('close', onClose);\n\t\tsocket.off('free', onFree);\n\t\tsocket.off('timeout', onTimeout);\n\t\tsocket.off('agentRemove', onRemove);\n\t};\n\n\tsocket.on('agentRemove', onRemove);\n\n\tagent.emit('free', socket, options);\n};\n\nconst createResolveProtocol = (cache, queue = new Map(), connect = undefined) => {\n\treturn async options => {\n\t\tconst name = `${options.host}:${options.port}:${options.ALPNProtocols.sort()}`;\n\n\t\tif (!cache.has(name)) {\n\t\t\tif (queue.has(name)) {\n\t\t\t\tconst result = await queue.get(name);\n\t\t\t\treturn {alpnProtocol: result.alpnProtocol};\n\t\t\t}\n\n\t\t\tconst {path} = options;\n\t\t\toptions.path = options.socketPath;\n\n\t\t\tconst resultPromise = resolveALPN(options, connect);\n\t\t\tqueue.set(name, resultPromise);\n\n\t\t\ttry {\n\t\t\t\tconst result = await resultPromise;\n\n\t\t\t\tcache.set(name, result.alpnProtocol);\n\t\t\t\tqueue.delete(name);\n\n\t\t\t\toptions.path = path;\n\n\t\t\t\treturn result;\n\t\t\t} catch (error) {\n\t\t\t\tqueue.delete(name);\n\n\t\t\t\toptions.path = path;\n\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\treturn {alpnProtocol: cache.get(name)};\n\t};\n};\n\nconst defaultResolveProtocol = createResolveProtocol(cache, queue);\n\nmodule.exports = async (input, options, callback) => {\n\tif (typeof input === 'string') {\n\t\tinput = urlToHttpOptions(new URL(input));\n\t} else if (input instanceof URL) {\n\t\tinput = urlToHttpOptions(input);\n\t} else {\n\t\tinput = {...input};\n\t}\n\n\tif (typeof options === 'function' || options === undefined) {\n\t\t// (options, callback)\n\t\tcallback = options;\n\t\toptions = input;\n\t} else {\n\t\t// (input, options, callback)\n\t\toptions = Object.assign(input, options);\n\t}\n\n\toptions.ALPNProtocols = options.ALPNProtocols || ['h2', 'http/1.1'];\n\n\tif (!Array.isArray(options.ALPNProtocols) || options.ALPNProtocols.length === 0) {\n\t\tthrow new Error('The `ALPNProtocols` option must be an Array with at least one entry');\n\t}\n\n\toptions.protocol = options.protocol || 'https:';\n\tconst isHttps = options.protocol === 'https:';\n\n\toptions.host = options.hostname || options.host || 'localhost';\n\toptions.session = options.tlsSession;\n\toptions.servername = options.servername || calculateServerName((options.headers && options.headers.host) || options.host);\n\toptions.port = options.port || (isHttps ? 443 : 80);\n\toptions._defaultAgent = isHttps ? https.globalAgent : http.globalAgent;\n\n\tconst resolveProtocol = options.resolveProtocol || defaultResolveProtocol;\n\n\t// Note: We don't support `h2session` here\n\n\tlet {agent} = options;\n\tif (agent !== undefined && agent !== false && agent.constructor.name !== 'Object') {\n\t\tthrow new Error('The `options.agent` can be only an object `http`, `https` or `http2` properties');\n\t}\n\n\tif (isHttps) {\n\t\toptions.resolveSocket = true;\n\n\t\tlet {socket, alpnProtocol, timeout} = await resolveProtocol(options);\n\n\t\tif (timeout) {\n\t\t\tif (socket) {\n\t\t\t\tsocket.destroy();\n\t\t\t}\n\n\t\t\tconst error = new Error(`Timed out resolving ALPN: ${options.timeout} ms`);\n\t\t\terror.code = 'ETIMEDOUT';\n\t\t\terror.ms = options.timeout;\n\n\t\t\tthrow error;\n\t\t}\n\n\t\t// We can't accept custom `createConnection` because the API is different for HTTP/2\n\t\tif (socket && options.createConnection) {\n\t\t\tsocket.destroy();\n\t\t\tsocket = undefined;\n\t\t}\n\n\t\tdelete options.resolveSocket;\n\n\t\tconst isHttp2 = alpnProtocol === 'h2';\n\n\t\tif (agent) {\n\t\t\tagent = isHttp2 ? agent.http2 : agent.https;\n\t\t\toptions.agent = agent;\n\t\t}\n\n\t\tif (agent === undefined) {\n\t\t\tagent = isHttp2 ? globalAgent : https.globalAgent;\n\t\t}\n\n\t\tif (socket) {\n\t\t\tif (agent === false) {\n\t\t\t\tsocket.destroy();\n\t\t\t} else {\n\t\t\t\tconst defaultCreateConnection = (isHttp2 ? Agent : https.Agent).prototype.createConnection;\n\n\t\t\t\tif (agent.createConnection === defaultCreateConnection) {\n\t\t\t\t\tif (isHttp2) {\n\t\t\t\t\t\toptions._reuseSocket = socket;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tinstallSocket(agent, socket, options);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tsocket.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (isHttp2) {\n\t\t\treturn delayAsyncDestroy(new Http2ClientRequest(options, callback));\n\t\t}\n\t} else if (agent) {\n\t\toptions.agent = agent.http;\n\t}\n\n\t// If we're sending HTTP/1.1, handle any explicitly set H2 headers in the options:\n\tif (options.headers) {\n\t\toptions.headers = {...options.headers};\n\n\t\t// :authority is equivalent to the HTTP/1.1 host header\n\t\tif (options.headers[':authority']) {\n\t\t\tif (!options.headers.host) {\n\t\t\t\toptions.headers.host = options.headers[':authority'];\n\t\t\t}\n\n\t\t\tdelete options.headers[':authority'];\n\t\t}\n\n\t\t// Remove other HTTP/2 headers as they have their counterparts in the options\n\t\tdelete options.headers[':method'];\n\t\tdelete options.headers[':scheme'];\n\t\tdelete options.headers[':path'];\n\t}\n\n\treturn delayAsyncDestroy(http.request(options, callback));\n};\n\nmodule.exports.protocolCache = cache;\nmodule.exports.resolveProtocol = defaultResolveProtocol;\nmodule.exports.createResolveProtocol = createResolveProtocol;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}