{"ast":null,"code":"/**\n * @title Node PDF main.js\n * Node PDF allows you to convert pdf files into raw text. The library supports\n * text extraction from electronic searchable pdfs.\n *\n * In addition, the library supports OCR text extract from pdfs which just\n * contain scanned images via the tesseract-ocr engine\n *\n * Multi-page pdfs are supported for both searchable and image pdfs.\n * The library returns an array of strings where the string at a given\n * index in the output array cooresponds the page in the input pdf document\n *\n * @author Noah Isaacson\n * @date 2012-10-26\n */\nvar path = require('path');\nvar temp = require('temp');\nvar exec = require('child_process').exec;\nvar fs = require('fs');\nvar walk = require('walk');\nvar async = require('async');\nvar rimraf = require('rimraf');\nvar Raw = require('./lib/raw');\nvar Electronic = require('./lib/electronic');\n\n/**\n * To process a pdf, pass in the absolute path to the pdf file on disk\n\n * @param {Object} params should have the following fields set\n * @param {String} params.pdf_path the absolute path to the pdf file on disk\n * @param {Boolean} params.clean true if you want the temporary single page pdfs\n * @param {Boolean} options.type must be either \"ocr\" or \"text\"\n *\n * @return {Array} text_pages is an array of strings, where each string is the\n * extracted text for the matching page index in the pdf document\n * @return {Processor} a processor object which will emit events as they occur\n */\nmodule.exports = function (pdf_path, options, cb) {\n  var err;\n  var processor = new Raw();\n  if (!'pdf_path') {\n    err = 'you must supply a pdf path as the first parameter';\n    return cb(err);\n  }\n  if (!options) {\n    err = 'no options supplied. You must supply an options object with the \"type\" field set';\n    return cb(err);\n  }\n  if (!options.hasOwnProperty('type') || !options.type) {\n    err = 'error, you must specify the type of extraction you wish to perform in the options object. Allowed values are \"ocr\" or \"text\"';\n    return cb(err);\n  }\n  if (options.type === 'ocr') {\n    processor = new Raw();\n  } else if (options.type === 'text') {\n    processor = new Electronic();\n  } else {\n    err = 'error, you must specify the type of extraction you wish to perform in the options object. Allowed values are \"ocr\" or \"text\"';\n    return cb(err);\n    ;\n  }\n  fs.exists(pdf_path, function (exists) {\n    if (!exists) {\n      err = 'no file exists at the path you specified';\n      return cb(err);\n    }\n    processor.process(pdf_path, options);\n    cb();\n  });\n  return processor;\n};","map":{"version":3,"names":["path","require","temp","exec","fs","walk","async","rimraf","Raw","Electronic","module","exports","pdf_path","options","cb","err","processor","hasOwnProperty","type","exists","process"],"sources":["D:/LangChainJS/chatpdf/node_modules/pdf-extract/main.js"],"sourcesContent":["/**\n * @title Node PDF main.js\n * Node PDF allows you to convert pdf files into raw text. The library supports\n * text extraction from electronic searchable pdfs.\n *\n * In addition, the library supports OCR text extract from pdfs which just\n * contain scanned images via the tesseract-ocr engine\n *\n * Multi-page pdfs are supported for both searchable and image pdfs.\n * The library returns an array of strings where the string at a given\n * index in the output array cooresponds the page in the input pdf document\n *\n * @author Noah Isaacson\n * @date 2012-10-26\n */\nvar path = require('path');\nvar temp = require('temp');\nvar exec = require('child_process').exec;\nvar fs = require('fs');\nvar walk = require('walk');\nvar async = require('async');\nvar rimraf = require('rimraf');\n\nvar Raw = require('./lib/raw');\nvar Electronic = require('./lib/electronic');\n\n/**\n * To process a pdf, pass in the absolute path to the pdf file on disk\n\n * @param {Object} params should have the following fields set\n * @param {String} params.pdf_path the absolute path to the pdf file on disk\n * @param {Boolean} params.clean true if you want the temporary single page pdfs\n * @param {Boolean} options.type must be either \"ocr\" or \"text\"\n *\n * @return {Array} text_pages is an array of strings, where each string is the\n * extracted text for the matching page index in the pdf document\n * @return {Processor} a processor object which will emit events as they occur\n */\nmodule.exports = function(pdf_path, options, cb) {\n  var err;\n  var processor = new Raw();\n  if (!'pdf_path') {\n    err = 'you must supply a pdf path as the first parameter'\n    return cb(err);\n  }\n  if (!options) {\n    err =  'no options supplied. You must supply an options object with the \"type\" field set'\n    return cb(err);\n  }\n  if (!options.hasOwnProperty('type') || ! options.type) {\n    err  ='error, you must specify the type of extraction you wish to perform in the options object. Allowed values are \"ocr\" or \"text\"';\n    return cb(err);\n  }\n  if (options.type === 'ocr') {\n    processor = new Raw();\n  }\n  else if (options.type === 'text') {\n    processor = new Electronic();\n  }\n  else {\n    err  ='error, you must specify the type of extraction you wish to perform in the options object. Allowed values are \"ocr\" or \"text\"';\n    return cb(err);;\n  }\n  fs.exists(pdf_path, function (exists) {\n    if (!exists) {\n      err = 'no file exists at the path you specified';\n      return cb(err);\n    }\n    processor.process(pdf_path, options);\n    cb();\n  });\n  return processor;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC1B,IAAIC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC1B,IAAIE,IAAI,GAAGF,OAAO,CAAC,eAAe,CAAC,CAACE,IAAI;AACxC,IAAIC,EAAE,GAAGH,OAAO,CAAC,IAAI,CAAC;AACtB,IAAII,IAAI,GAAGJ,OAAO,CAAC,MAAM,CAAC;AAC1B,IAAIK,KAAK,GAAGL,OAAO,CAAC,OAAO,CAAC;AAC5B,IAAIM,MAAM,GAAGN,OAAO,CAAC,QAAQ,CAAC;AAE9B,IAAIO,GAAG,GAAGP,OAAO,CAAC,WAAW,CAAC;AAC9B,IAAIQ,UAAU,GAAGR,OAAO,CAAC,kBAAkB,CAAC;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAS,MAAM,CAACC,OAAO,GAAG,UAASC,QAAQ,EAAEC,OAAO,EAAEC,EAAE,EAAE;EAC/C,IAAIC,GAAG;EACP,IAAIC,SAAS,GAAG,IAAIR,GAAG,CAAC,CAAC;EACzB,IAAI,CAAC,UAAU,EAAE;IACfO,GAAG,GAAG,mDAAmD;IACzD,OAAOD,EAAE,CAACC,GAAG,CAAC;EAChB;EACA,IAAI,CAACF,OAAO,EAAE;IACZE,GAAG,GAAI,kFAAkF;IACzF,OAAOD,EAAE,CAACC,GAAG,CAAC;EAChB;EACA,IAAI,CAACF,OAAO,CAACI,cAAc,CAAC,MAAM,CAAC,IAAI,CAAEJ,OAAO,CAACK,IAAI,EAAE;IACrDH,GAAG,GAAG,8HAA8H;IACpI,OAAOD,EAAE,CAACC,GAAG,CAAC;EAChB;EACA,IAAIF,OAAO,CAACK,IAAI,KAAK,KAAK,EAAE;IAC1BF,SAAS,GAAG,IAAIR,GAAG,CAAC,CAAC;EACvB,CAAC,MACI,IAAIK,OAAO,CAACK,IAAI,KAAK,MAAM,EAAE;IAChCF,SAAS,GAAG,IAAIP,UAAU,CAAC,CAAC;EAC9B,CAAC,MACI;IACHM,GAAG,GAAG,8HAA8H;IACpI,OAAOD,EAAE,CAACC,GAAG,CAAC;IAAC;EACjB;EACAX,EAAE,CAACe,MAAM,CAACP,QAAQ,EAAE,UAAUO,MAAM,EAAE;IACpC,IAAI,CAACA,MAAM,EAAE;MACXJ,GAAG,GAAG,0CAA0C;MAChD,OAAOD,EAAE,CAACC,GAAG,CAAC;IAChB;IACAC,SAAS,CAACI,OAAO,CAACR,QAAQ,EAAEC,OAAO,CAAC;IACpCC,EAAE,CAAC,CAAC;EACN,CAAC,CAAC;EACF,OAAOE,SAAS;AAClB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}