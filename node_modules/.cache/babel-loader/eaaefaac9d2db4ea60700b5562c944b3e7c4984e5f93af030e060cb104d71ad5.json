{"ast":null,"code":"// https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\nconst DATA_URL_DEFAULT_MIME_TYPE = 'text/plain';\nconst DATA_URL_DEFAULT_CHARSET = 'us-ascii';\nconst testParameter = (name, filters) => filters.some(filter => filter instanceof RegExp ? filter.test(name) : filter === name);\nconst supportedProtocols = new Set(['https:', 'http:', 'file:']);\nconst hasCustomProtocol = urlString => {\n  try {\n    const {\n      protocol\n    } = new URL(urlString);\n    return protocol.endsWith(':') && !protocol.includes('.') && !supportedProtocols.has(protocol);\n  } catch {\n    return false;\n  }\n};\nconst normalizeDataURL = (urlString, {\n  stripHash\n}) => {\n  const match = /^data:(?<type>[^,]*?),(?<data>[^#]*?)(?:#(?<hash>.*))?$/.exec(urlString);\n  if (!match) {\n    throw new Error(`Invalid URL: ${urlString}`);\n  }\n  let {\n    type,\n    data,\n    hash\n  } = match.groups;\n  const mediaType = type.split(';');\n  hash = stripHash ? '' : hash;\n  let isBase64 = false;\n  if (mediaType[mediaType.length - 1] === 'base64') {\n    mediaType.pop();\n    isBase64 = true;\n  }\n\n  // Lowercase MIME type\n  const mimeType = mediaType.shift()?.toLowerCase() ?? '';\n  const attributes = mediaType.map(attribute => {\n    let [key, value = ''] = attribute.split('=').map(string => string.trim());\n\n    // Lowercase `charset`\n    if (key === 'charset') {\n      value = value.toLowerCase();\n      if (value === DATA_URL_DEFAULT_CHARSET) {\n        return '';\n      }\n    }\n    return `${key}${value ? `=${value}` : ''}`;\n  }).filter(Boolean);\n  const normalizedMediaType = [...attributes];\n  if (isBase64) {\n    normalizedMediaType.push('base64');\n  }\n  if (normalizedMediaType.length > 0 || mimeType && mimeType !== DATA_URL_DEFAULT_MIME_TYPE) {\n    normalizedMediaType.unshift(mimeType);\n  }\n  return `data:${normalizedMediaType.join(';')},${isBase64 ? data.trim() : data}${hash ? `#${hash}` : ''}`;\n};\nexport default function normalizeUrl(urlString, options) {\n  options = {\n    defaultProtocol: 'http',\n    normalizeProtocol: true,\n    forceHttp: false,\n    forceHttps: false,\n    stripAuthentication: true,\n    stripHash: false,\n    stripTextFragment: true,\n    stripWWW: true,\n    removeQueryParameters: [/^utm_\\w+/i],\n    removeTrailingSlash: true,\n    removeSingleSlash: true,\n    removeDirectoryIndex: false,\n    removeExplicitPort: false,\n    sortQueryParameters: true,\n    ...options\n  };\n\n  // Legacy: Append `:` to the protocol if missing.\n  if (typeof options.defaultProtocol === 'string' && !options.defaultProtocol.endsWith(':')) {\n    options.defaultProtocol = `${options.defaultProtocol}:`;\n  }\n  urlString = urlString.trim();\n\n  // Data URL\n  if (/^data:/i.test(urlString)) {\n    return normalizeDataURL(urlString, options);\n  }\n  if (hasCustomProtocol(urlString)) {\n    return urlString;\n  }\n  const hasRelativeProtocol = urlString.startsWith('//');\n  const isRelativeUrl = !hasRelativeProtocol && /^\\.*\\//.test(urlString);\n\n  // Prepend protocol\n  if (!isRelativeUrl) {\n    urlString = urlString.replace(/^(?!(?:\\w+:)?\\/\\/)|^\\/\\//, options.defaultProtocol);\n  }\n  const urlObject = new URL(urlString);\n  if (options.forceHttp && options.forceHttps) {\n    throw new Error('The `forceHttp` and `forceHttps` options cannot be used together');\n  }\n  if (options.forceHttp && urlObject.protocol === 'https:') {\n    urlObject.protocol = 'http:';\n  }\n  if (options.forceHttps && urlObject.protocol === 'http:') {\n    urlObject.protocol = 'https:';\n  }\n\n  // Remove auth\n  if (options.stripAuthentication) {\n    urlObject.username = '';\n    urlObject.password = '';\n  }\n\n  // Remove hash\n  if (options.stripHash) {\n    urlObject.hash = '';\n  } else if (options.stripTextFragment) {\n    urlObject.hash = urlObject.hash.replace(/#?:~:text.*?$/i, '');\n  }\n\n  // Remove duplicate slashes if not preceded by a protocol\n  // NOTE: This could be implemented using a single negative lookbehind\n  // regex, but we avoid that to maintain compatibility with older js engines\n  // which do not have support for that feature.\n  if (urlObject.pathname) {\n    // TODO: Replace everything below with `urlObject.pathname = urlObject.pathname.replace(/(?<!\\b[a-z][a-z\\d+\\-.]{1,50}:)\\/{2,}/g, '/');` when Safari supports negative lookbehind.\n\n    // Split the string by occurrences of this protocol regex, and perform\n    // duplicate-slash replacement on the strings between those occurrences\n    // (if any).\n    const protocolRegex = /\\b[a-z][a-z\\d+\\-.]{1,50}:\\/\\//g;\n    let lastIndex = 0;\n    let result = '';\n    for (;;) {\n      const match = protocolRegex.exec(urlObject.pathname);\n      if (!match) {\n        break;\n      }\n      const protocol = match[0];\n      const protocolAtIndex = match.index;\n      const intermediate = urlObject.pathname.slice(lastIndex, protocolAtIndex);\n      result += intermediate.replace(/\\/{2,}/g, '/');\n      result += protocol;\n      lastIndex = protocolAtIndex + protocol.length;\n    }\n    const remnant = urlObject.pathname.slice(lastIndex, urlObject.pathname.length);\n    result += remnant.replace(/\\/{2,}/g, '/');\n    urlObject.pathname = result;\n  }\n\n  // Decode URI octets\n  if (urlObject.pathname) {\n    try {\n      urlObject.pathname = decodeURI(urlObject.pathname);\n    } catch {}\n  }\n\n  // Remove directory index\n  if (options.removeDirectoryIndex === true) {\n    options.removeDirectoryIndex = [/^index\\.[a-z]+$/];\n  }\n  if (Array.isArray(options.removeDirectoryIndex) && options.removeDirectoryIndex.length > 0) {\n    let pathComponents = urlObject.pathname.split('/');\n    const lastComponent = pathComponents[pathComponents.length - 1];\n    if (testParameter(lastComponent, options.removeDirectoryIndex)) {\n      pathComponents = pathComponents.slice(0, -1);\n      urlObject.pathname = pathComponents.slice(1).join('/') + '/';\n    }\n  }\n  if (urlObject.hostname) {\n    // Remove trailing dot\n    urlObject.hostname = urlObject.hostname.replace(/\\.$/, '');\n\n    // Remove `www.`\n    if (options.stripWWW && /^www\\.(?!www\\.)[a-z\\-\\d]{1,63}\\.[a-z.\\-\\d]{2,63}$/.test(urlObject.hostname)) {\n      // Each label should be max 63 at length (min: 1).\n      // Source: https://en.wikipedia.org/wiki/Hostname#Restrictions_on_valid_host_names\n      // Each TLD should be up to 63 characters long (min: 2).\n      // It is technically possible to have a single character TLD, but none currently exist.\n      urlObject.hostname = urlObject.hostname.replace(/^www\\./, '');\n    }\n  }\n\n  // Remove query unwanted parameters\n  if (Array.isArray(options.removeQueryParameters)) {\n    // eslint-disable-next-line unicorn/no-useless-spread -- We are intentionally spreading to get a copy.\n    for (const key of [...urlObject.searchParams.keys()]) {\n      if (testParameter(key, options.removeQueryParameters)) {\n        urlObject.searchParams.delete(key);\n      }\n    }\n  }\n  if (!Array.isArray(options.keepQueryParameters) && options.removeQueryParameters === true) {\n    urlObject.search = '';\n  }\n\n  // Keep wanted query parameters\n  if (Array.isArray(options.keepQueryParameters) && options.keepQueryParameters.length > 0) {\n    // eslint-disable-next-line unicorn/no-useless-spread -- We are intentionally spreading to get a copy.\n    for (const key of [...urlObject.searchParams.keys()]) {\n      if (!testParameter(key, options.keepQueryParameters)) {\n        urlObject.searchParams.delete(key);\n      }\n    }\n  }\n\n  // Sort query parameters\n  if (options.sortQueryParameters) {\n    urlObject.searchParams.sort();\n\n    // Calling `.sort()` encodes the search parameters, so we need to decode them again.\n    try {\n      urlObject.search = decodeURIComponent(urlObject.search);\n    } catch {}\n  }\n  if (options.removeTrailingSlash) {\n    urlObject.pathname = urlObject.pathname.replace(/\\/$/, '');\n  }\n\n  // Remove an explicit port number, excluding a default port number, if applicable\n  if (options.removeExplicitPort && urlObject.port) {\n    urlObject.port = '';\n  }\n  const oldUrlString = urlString;\n\n  // Take advantage of many of the Node `url` normalizations\n  urlString = urlObject.toString();\n  if (!options.removeSingleSlash && urlObject.pathname === '/' && !oldUrlString.endsWith('/') && urlObject.hash === '') {\n    urlString = urlString.replace(/\\/$/, '');\n  }\n\n  // Remove ending `/` unless removeSingleSlash is false\n  if ((options.removeTrailingSlash || urlObject.pathname === '/') && urlObject.hash === '' && options.removeSingleSlash) {\n    urlString = urlString.replace(/\\/$/, '');\n  }\n\n  // Restore relative protocol, if applicable\n  if (hasRelativeProtocol && !options.normalizeProtocol) {\n    urlString = urlString.replace(/^http:\\/\\//, '//');\n  }\n\n  // Remove http/https\n  if (options.stripProtocol) {\n    urlString = urlString.replace(/^(?:https?:)?\\/\\//, '');\n  }\n  return urlString;\n}","map":{"version":3,"names":["DATA_URL_DEFAULT_MIME_TYPE","DATA_URL_DEFAULT_CHARSET","testParameter","name","filters","some","filter","RegExp","test","supportedProtocols","Set","hasCustomProtocol","urlString","protocol","URL","endsWith","includes","has","normalizeDataURL","stripHash","match","exec","Error","type","data","hash","groups","mediaType","split","isBase64","length","pop","mimeType","shift","toLowerCase","attributes","map","attribute","key","value","string","trim","Boolean","normalizedMediaType","push","unshift","join","normalizeUrl","options","defaultProtocol","normalizeProtocol","forceHttp","forceHttps","stripAuthentication","stripTextFragment","stripWWW","removeQueryParameters","removeTrailingSlash","removeSingleSlash","removeDirectoryIndex","removeExplicitPort","sortQueryParameters","hasRelativeProtocol","startsWith","isRelativeUrl","replace","urlObject","username","password","pathname","protocolRegex","lastIndex","result","protocolAtIndex","index","intermediate","slice","remnant","decodeURI","Array","isArray","pathComponents","lastComponent","hostname","searchParams","keys","delete","keepQueryParameters","search","sort","decodeURIComponent","port","oldUrlString","toString","stripProtocol"],"sources":["D:/LangChainJS/chatpdf/node_modules/cacheable-request/node_modules/normalize-url/index.js"],"sourcesContent":["// https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\nconst DATA_URL_DEFAULT_MIME_TYPE = 'text/plain';\nconst DATA_URL_DEFAULT_CHARSET = 'us-ascii';\n\nconst testParameter = (name, filters) => filters.some(filter => filter instanceof RegExp ? filter.test(name) : filter === name);\n\nconst supportedProtocols = new Set([\n\t'https:',\n\t'http:',\n\t'file:',\n]);\n\nconst hasCustomProtocol = urlString => {\n\ttry {\n\t\tconst {protocol} = new URL(urlString);\n\n\t\treturn protocol.endsWith(':')\n\t\t\t&& !protocol.includes('.')\n\t\t\t&& !supportedProtocols.has(protocol);\n\t} catch {\n\t\treturn false;\n\t}\n};\n\nconst normalizeDataURL = (urlString, {stripHash}) => {\n\tconst match = /^data:(?<type>[^,]*?),(?<data>[^#]*?)(?:#(?<hash>.*))?$/.exec(urlString);\n\n\tif (!match) {\n\t\tthrow new Error(`Invalid URL: ${urlString}`);\n\t}\n\n\tlet {type, data, hash} = match.groups;\n\tconst mediaType = type.split(';');\n\thash = stripHash ? '' : hash;\n\n\tlet isBase64 = false;\n\tif (mediaType[mediaType.length - 1] === 'base64') {\n\t\tmediaType.pop();\n\t\tisBase64 = true;\n\t}\n\n\t// Lowercase MIME type\n\tconst mimeType = mediaType.shift()?.toLowerCase() ?? '';\n\tconst attributes = mediaType\n\t\t.map(attribute => {\n\t\t\tlet [key, value = ''] = attribute.split('=').map(string => string.trim());\n\n\t\t\t// Lowercase `charset`\n\t\t\tif (key === 'charset') {\n\t\t\t\tvalue = value.toLowerCase();\n\n\t\t\t\tif (value === DATA_URL_DEFAULT_CHARSET) {\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn `${key}${value ? `=${value}` : ''}`;\n\t\t})\n\t\t.filter(Boolean);\n\n\tconst normalizedMediaType = [\n\t\t...attributes,\n\t];\n\n\tif (isBase64) {\n\t\tnormalizedMediaType.push('base64');\n\t}\n\n\tif (normalizedMediaType.length > 0 || (mimeType && mimeType !== DATA_URL_DEFAULT_MIME_TYPE)) {\n\t\tnormalizedMediaType.unshift(mimeType);\n\t}\n\n\treturn `data:${normalizedMediaType.join(';')},${isBase64 ? data.trim() : data}${hash ? `#${hash}` : ''}`;\n};\n\nexport default function normalizeUrl(urlString, options) {\n\toptions = {\n\t\tdefaultProtocol: 'http',\n\t\tnormalizeProtocol: true,\n\t\tforceHttp: false,\n\t\tforceHttps: false,\n\t\tstripAuthentication: true,\n\t\tstripHash: false,\n\t\tstripTextFragment: true,\n\t\tstripWWW: true,\n\t\tremoveQueryParameters: [/^utm_\\w+/i],\n\t\tremoveTrailingSlash: true,\n\t\tremoveSingleSlash: true,\n\t\tremoveDirectoryIndex: false,\n\t\tremoveExplicitPort: false,\n\t\tsortQueryParameters: true,\n\t\t...options,\n\t};\n\n\t// Legacy: Append `:` to the protocol if missing.\n\tif (typeof options.defaultProtocol === 'string' && !options.defaultProtocol.endsWith(':')) {\n\t\toptions.defaultProtocol = `${options.defaultProtocol}:`;\n\t}\n\n\turlString = urlString.trim();\n\n\t// Data URL\n\tif (/^data:/i.test(urlString)) {\n\t\treturn normalizeDataURL(urlString, options);\n\t}\n\n\tif (hasCustomProtocol(urlString)) {\n\t\treturn urlString;\n\t}\n\n\tconst hasRelativeProtocol = urlString.startsWith('//');\n\tconst isRelativeUrl = !hasRelativeProtocol && /^\\.*\\//.test(urlString);\n\n\t// Prepend protocol\n\tif (!isRelativeUrl) {\n\t\turlString = urlString.replace(/^(?!(?:\\w+:)?\\/\\/)|^\\/\\//, options.defaultProtocol);\n\t}\n\n\tconst urlObject = new URL(urlString);\n\n\tif (options.forceHttp && options.forceHttps) {\n\t\tthrow new Error('The `forceHttp` and `forceHttps` options cannot be used together');\n\t}\n\n\tif (options.forceHttp && urlObject.protocol === 'https:') {\n\t\turlObject.protocol = 'http:';\n\t}\n\n\tif (options.forceHttps && urlObject.protocol === 'http:') {\n\t\turlObject.protocol = 'https:';\n\t}\n\n\t// Remove auth\n\tif (options.stripAuthentication) {\n\t\turlObject.username = '';\n\t\turlObject.password = '';\n\t}\n\n\t// Remove hash\n\tif (options.stripHash) {\n\t\turlObject.hash = '';\n\t} else if (options.stripTextFragment) {\n\t\turlObject.hash = urlObject.hash.replace(/#?:~:text.*?$/i, '');\n\t}\n\n\t// Remove duplicate slashes if not preceded by a protocol\n\t// NOTE: This could be implemented using a single negative lookbehind\n\t// regex, but we avoid that to maintain compatibility with older js engines\n\t// which do not have support for that feature.\n\tif (urlObject.pathname) {\n\t\t// TODO: Replace everything below with `urlObject.pathname = urlObject.pathname.replace(/(?<!\\b[a-z][a-z\\d+\\-.]{1,50}:)\\/{2,}/g, '/');` when Safari supports negative lookbehind.\n\n\t\t// Split the string by occurrences of this protocol regex, and perform\n\t\t// duplicate-slash replacement on the strings between those occurrences\n\t\t// (if any).\n\t\tconst protocolRegex = /\\b[a-z][a-z\\d+\\-.]{1,50}:\\/\\//g;\n\n\t\tlet lastIndex = 0;\n\t\tlet result = '';\n\t\tfor (;;) {\n\t\t\tconst match = protocolRegex.exec(urlObject.pathname);\n\t\t\tif (!match) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst protocol = match[0];\n\t\t\tconst protocolAtIndex = match.index;\n\t\t\tconst intermediate = urlObject.pathname.slice(lastIndex, protocolAtIndex);\n\n\t\t\tresult += intermediate.replace(/\\/{2,}/g, '/');\n\t\t\tresult += protocol;\n\t\t\tlastIndex = protocolAtIndex + protocol.length;\n\t\t}\n\n\t\tconst remnant = urlObject.pathname.slice(lastIndex, urlObject.pathname.length);\n\t\tresult += remnant.replace(/\\/{2,}/g, '/');\n\n\t\turlObject.pathname = result;\n\t}\n\n\t// Decode URI octets\n\tif (urlObject.pathname) {\n\t\ttry {\n\t\t\turlObject.pathname = decodeURI(urlObject.pathname);\n\t\t} catch {}\n\t}\n\n\t// Remove directory index\n\tif (options.removeDirectoryIndex === true) {\n\t\toptions.removeDirectoryIndex = [/^index\\.[a-z]+$/];\n\t}\n\n\tif (Array.isArray(options.removeDirectoryIndex) && options.removeDirectoryIndex.length > 0) {\n\t\tlet pathComponents = urlObject.pathname.split('/');\n\t\tconst lastComponent = pathComponents[pathComponents.length - 1];\n\n\t\tif (testParameter(lastComponent, options.removeDirectoryIndex)) {\n\t\t\tpathComponents = pathComponents.slice(0, -1);\n\t\t\turlObject.pathname = pathComponents.slice(1).join('/') + '/';\n\t\t}\n\t}\n\n\tif (urlObject.hostname) {\n\t\t// Remove trailing dot\n\t\turlObject.hostname = urlObject.hostname.replace(/\\.$/, '');\n\n\t\t// Remove `www.`\n\t\tif (options.stripWWW && /^www\\.(?!www\\.)[a-z\\-\\d]{1,63}\\.[a-z.\\-\\d]{2,63}$/.test(urlObject.hostname)) {\n\t\t\t// Each label should be max 63 at length (min: 1).\n\t\t\t// Source: https://en.wikipedia.org/wiki/Hostname#Restrictions_on_valid_host_names\n\t\t\t// Each TLD should be up to 63 characters long (min: 2).\n\t\t\t// It is technically possible to have a single character TLD, but none currently exist.\n\t\t\turlObject.hostname = urlObject.hostname.replace(/^www\\./, '');\n\t\t}\n\t}\n\n\t// Remove query unwanted parameters\n\tif (Array.isArray(options.removeQueryParameters)) {\n\t\t// eslint-disable-next-line unicorn/no-useless-spread -- We are intentionally spreading to get a copy.\n\t\tfor (const key of [...urlObject.searchParams.keys()]) {\n\t\t\tif (testParameter(key, options.removeQueryParameters)) {\n\t\t\t\turlObject.searchParams.delete(key);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!Array.isArray(options.keepQueryParameters) && options.removeQueryParameters === true) {\n\t\turlObject.search = '';\n\t}\n\n\t// Keep wanted query parameters\n\tif (Array.isArray(options.keepQueryParameters) && options.keepQueryParameters.length > 0) {\n\t\t// eslint-disable-next-line unicorn/no-useless-spread -- We are intentionally spreading to get a copy.\n\t\tfor (const key of [...urlObject.searchParams.keys()]) {\n\t\t\tif (!testParameter(key, options.keepQueryParameters)) {\n\t\t\t\turlObject.searchParams.delete(key);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Sort query parameters\n\tif (options.sortQueryParameters) {\n\t\turlObject.searchParams.sort();\n\n\t\t// Calling `.sort()` encodes the search parameters, so we need to decode them again.\n\t\ttry {\n\t\t\turlObject.search = decodeURIComponent(urlObject.search);\n\t\t} catch {}\n\t}\n\n\tif (options.removeTrailingSlash) {\n\t\turlObject.pathname = urlObject.pathname.replace(/\\/$/, '');\n\t}\n\n\t// Remove an explicit port number, excluding a default port number, if applicable\n\tif (options.removeExplicitPort && urlObject.port) {\n\t\turlObject.port = '';\n\t}\n\n\tconst oldUrlString = urlString;\n\n\t// Take advantage of many of the Node `url` normalizations\n\turlString = urlObject.toString();\n\n\tif (!options.removeSingleSlash && urlObject.pathname === '/' && !oldUrlString.endsWith('/') && urlObject.hash === '') {\n\t\turlString = urlString.replace(/\\/$/, '');\n\t}\n\n\t// Remove ending `/` unless removeSingleSlash is false\n\tif ((options.removeTrailingSlash || urlObject.pathname === '/') && urlObject.hash === '' && options.removeSingleSlash) {\n\t\turlString = urlString.replace(/\\/$/, '');\n\t}\n\n\t// Restore relative protocol, if applicable\n\tif (hasRelativeProtocol && !options.normalizeProtocol) {\n\t\turlString = urlString.replace(/^http:\\/\\//, '//');\n\t}\n\n\t// Remove http/https\n\tif (options.stripProtocol) {\n\t\turlString = urlString.replace(/^(?:https?:)?\\/\\//, '');\n\t}\n\n\treturn urlString;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}