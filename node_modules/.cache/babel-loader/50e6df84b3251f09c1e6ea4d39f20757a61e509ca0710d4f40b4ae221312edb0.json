{"ast":null,"code":"const typedArrayTypeNames = ['Int8Array', 'Uint8Array', 'Uint8ClampedArray', 'Int16Array', 'Uint16Array', 'Int32Array', 'Uint32Array', 'Float32Array', 'Float64Array', 'BigInt64Array', 'BigUint64Array'];\nfunction isTypedArrayName(name) {\n  return typedArrayTypeNames.includes(name);\n}\nconst objectTypeNames = ['Function', 'Generator', 'AsyncGenerator', 'GeneratorFunction', 'AsyncGeneratorFunction', 'AsyncFunction', 'Observable', 'Array', 'Buffer', 'Blob', 'Object', 'RegExp', 'Date', 'Error', 'Map', 'Set', 'WeakMap', 'WeakSet', 'WeakRef', 'ArrayBuffer', 'SharedArrayBuffer', 'DataView', 'Promise', 'URL', 'FormData', 'URLSearchParams', 'HTMLElement', 'NaN', ...typedArrayTypeNames];\nfunction isObjectTypeName(name) {\n  return objectTypeNames.includes(name);\n}\nconst primitiveTypeNames = ['null', 'undefined', 'string', 'number', 'bigint', 'boolean', 'symbol'];\nfunction isPrimitiveTypeName(name) {\n  return primitiveTypeNames.includes(name);\n}\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isOfType(type) {\n  return value => typeof value === type;\n}\nconst {\n  toString\n} = Object.prototype;\nconst getObjectType = value => {\n  const objectTypeName = toString.call(value).slice(8, -1);\n  if (/HTML\\w+Element/.test(objectTypeName) && is.domElement(value)) {\n    return 'HTMLElement';\n  }\n  if (isObjectTypeName(objectTypeName)) {\n    return objectTypeName;\n  }\n  return undefined;\n};\nconst isObjectOfType = type => value => getObjectType(value) === type;\nfunction is(value) {\n  if (value === null) {\n    return 'null';\n  }\n  switch (typeof value) {\n    case 'undefined':\n      {\n        return 'undefined';\n      }\n    case 'string':\n      {\n        return 'string';\n      }\n    case 'number':\n      {\n        return Number.isNaN(value) ? 'NaN' : 'number';\n      }\n    case 'boolean':\n      {\n        return 'boolean';\n      }\n    case 'function':\n      {\n        return 'Function';\n      }\n    case 'bigint':\n      {\n        return 'bigint';\n      }\n    case 'symbol':\n      {\n        return 'symbol';\n      }\n    default:\n  }\n  if (is.observable(value)) {\n    return 'Observable';\n  }\n  if (is.array(value)) {\n    return 'Array';\n  }\n  if (is.buffer(value)) {\n    return 'Buffer';\n  }\n  const tagType = getObjectType(value);\n  if (tagType) {\n    return tagType;\n  }\n  if (value instanceof String || value instanceof Boolean || value instanceof Number) {\n    throw new TypeError('Please don\\'t use object wrappers for primitive types');\n  }\n  return 'Object';\n}\nis.undefined = isOfType('undefined');\nis.string = isOfType('string');\nconst isNumberType = isOfType('number');\nis.number = value => isNumberType(value) && !is.nan(value);\nis.positiveNumber = value => is.number(value) && value > 0;\nis.negativeNumber = value => is.number(value) && value < 0;\nis.bigint = isOfType('bigint');\n// eslint-disable-next-line @typescript-eslint/ban-types\nis.function_ = isOfType('function');\n// eslint-disable-next-line @typescript-eslint/ban-types\nis.null_ = value => value === null;\nis.class_ = value => is.function_(value) && value.toString().startsWith('class ');\nis.boolean = value => value === true || value === false;\nis.symbol = isOfType('symbol');\nis.numericString = value => is.string(value) && !is.emptyStringOrWhitespace(value) && !Number.isNaN(Number(value));\nis.array = (value, assertion) => {\n  if (!Array.isArray(value)) {\n    return false;\n  }\n  if (!is.function_(assertion)) {\n    return true;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n  return value.every(element => assertion(element));\n};\n// eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-call\nis.buffer = value => value?.constructor?.isBuffer?.(value) ?? false;\nis.blob = value => isObjectOfType('Blob')(value);\nis.nullOrUndefined = value => is.null_(value) || is.undefined(value); // eslint-disable-line @typescript-eslint/ban-types\nis.object = value => !is.null_(value) && (typeof value === 'object' || is.function_(value)); // eslint-disable-line @typescript-eslint/ban-types\nis.iterable = value => is.function_(value?.[Symbol.iterator]);\nis.asyncIterable = value => is.function_(value?.[Symbol.asyncIterator]);\nis.generator = value => is.iterable(value) && is.function_(value?.next) && is.function_(value?.throw);\nis.asyncGenerator = value => is.asyncIterable(value) && is.function_(value.next) && is.function_(value.throw);\nis.nativePromise = value => isObjectOfType('Promise')(value);\nconst hasPromiseApi = value => is.function_(value?.then) && is.function_(value?.catch);\nis.promise = value => is.nativePromise(value) || hasPromiseApi(value);\nis.generatorFunction = isObjectOfType('GeneratorFunction');\nis.asyncGeneratorFunction = value => getObjectType(value) === 'AsyncGeneratorFunction';\nis.asyncFunction = value => getObjectType(value) === 'AsyncFunction';\n// eslint-disable-next-line no-prototype-builtins, @typescript-eslint/ban-types\nis.boundFunction = value => is.function_(value) && !value.hasOwnProperty('prototype');\nis.regExp = isObjectOfType('RegExp');\nis.date = isObjectOfType('Date');\nis.error = isObjectOfType('Error');\nis.map = value => isObjectOfType('Map')(value);\nis.set = value => isObjectOfType('Set')(value);\nis.weakMap = value => isObjectOfType('WeakMap')(value); // eslint-disable-line @typescript-eslint/ban-types\nis.weakSet = value => isObjectOfType('WeakSet')(value); // eslint-disable-line @typescript-eslint/ban-types\nis.weakRef = value => isObjectOfType('WeakRef')(value); // eslint-disable-line @typescript-eslint/ban-types\nis.int8Array = isObjectOfType('Int8Array');\nis.uint8Array = isObjectOfType('Uint8Array');\nis.uint8ClampedArray = isObjectOfType('Uint8ClampedArray');\nis.int16Array = isObjectOfType('Int16Array');\nis.uint16Array = isObjectOfType('Uint16Array');\nis.int32Array = isObjectOfType('Int32Array');\nis.uint32Array = isObjectOfType('Uint32Array');\nis.float32Array = isObjectOfType('Float32Array');\nis.float64Array = isObjectOfType('Float64Array');\nis.bigInt64Array = isObjectOfType('BigInt64Array');\nis.bigUint64Array = isObjectOfType('BigUint64Array');\nis.arrayBuffer = isObjectOfType('ArrayBuffer');\nis.sharedArrayBuffer = isObjectOfType('SharedArrayBuffer');\nis.dataView = isObjectOfType('DataView');\n// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\nis.enumCase = (value, targetEnum) => Object.values(targetEnum).includes(value);\nis.directInstanceOf = (instance, class_) => Object.getPrototypeOf(instance) === class_.prototype;\nis.urlInstance = value => isObjectOfType('URL')(value);\nis.urlString = value => {\n  if (!is.string(value)) {\n    return false;\n  }\n  try {\n    new URL(value); // eslint-disable-line no-new\n    return true;\n  } catch {\n    return false;\n  }\n};\n// Example: `is.truthy = (value: unknown): value is (not false | not 0 | not '' | not undefined | not null) => Boolean(value);`\nis.truthy = value => Boolean(value); // eslint-disable-line unicorn/prefer-native-coercion-functions\n// Example: `is.falsy = (value: unknown): value is (not true | 0 | '' | undefined | null) => Boolean(value);`\nis.falsy = value => !value;\nis.nan = value => Number.isNaN(value);\nis.primitive = value => is.null_(value) || isPrimitiveTypeName(typeof value);\nis.integer = value => Number.isInteger(value);\nis.safeInteger = value => Number.isSafeInteger(value);\nis.plainObject = value => {\n  // From: https://github.com/sindresorhus/is-plain-obj/blob/main/index.js\n  if (typeof value !== 'object' || value === null) {\n    return false;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const prototype = Object.getPrototypeOf(value);\n  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n};\nis.typedArray = value => isTypedArrayName(getObjectType(value));\nconst isValidLength = value => is.safeInteger(value) && value >= 0;\nis.arrayLike = value => !is.nullOrUndefined(value) && !is.function_(value) && isValidLength(value.length);\nis.tupleLike = (value, guards) => {\n  if (is.array(guards) && is.array(value) && guards.length === value.length) {\n    return guards.every((guard, index) => guard(value[index]));\n  }\n  return false;\n};\nis.inRange = (value, range) => {\n  if (is.number(range)) {\n    return value >= Math.min(0, range) && value <= Math.max(range, 0);\n  }\n  if (is.array(range) && range.length === 2) {\n    return value >= Math.min(...range) && value <= Math.max(...range);\n  }\n  throw new TypeError(`Invalid range: ${JSON.stringify(range)}`);\n};\n// eslint-disable-next-line @typescript-eslint/naming-convention\nconst NODE_TYPE_ELEMENT = 1;\n// eslint-disable-next-line @typescript-eslint/naming-convention\nconst DOM_PROPERTIES_TO_CHECK = ['innerHTML', 'ownerDocument', 'style', 'attributes', 'nodeValue'];\nis.domElement = value => is.object(value) && value.nodeType === NODE_TYPE_ELEMENT && is.string(value.nodeName) && !is.plainObject(value) && DOM_PROPERTIES_TO_CHECK.every(property => property in value);\nis.observable = value => {\n  if (!value) {\n    return false;\n  }\n  // eslint-disable-next-line no-use-extend-native/no-use-extend-native, @typescript-eslint/no-unsafe-call\n  if (value === value[Symbol.observable]?.()) {\n    return true;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n  if (value === value['@@observable']?.()) {\n    return true;\n  }\n  return false;\n};\nis.nodeStream = value => is.object(value) && is.function_(value.pipe) && !is.observable(value);\nis.infinite = value => value === Number.POSITIVE_INFINITY || value === Number.NEGATIVE_INFINITY;\nconst isAbsoluteMod2 = remainder => value => is.integer(value) && Math.abs(value % 2) === remainder;\nis.evenInteger = isAbsoluteMod2(0);\nis.oddInteger = isAbsoluteMod2(1);\nis.emptyArray = value => is.array(value) && value.length === 0;\nis.nonEmptyArray = value => is.array(value) && value.length > 0;\nis.emptyString = value => is.string(value) && value.length === 0;\nconst isWhiteSpaceString = value => is.string(value) && !/\\S/.test(value);\nis.emptyStringOrWhitespace = value => is.emptyString(value) || isWhiteSpaceString(value);\n// TODO: Use `not ''` when the `not` operator is available.\nis.nonEmptyString = value => is.string(value) && value.length > 0;\n// TODO: Use `not ''` when the `not` operator is available.\nis.nonEmptyStringAndNotWhitespace = value => is.string(value) && !is.emptyStringOrWhitespace(value);\n// eslint-disable-next-line unicorn/no-array-callback-reference\nis.emptyObject = value => is.object(value) && !is.map(value) && !is.set(value) && Object.keys(value).length === 0;\n// TODO: Use `not` operator here to remove `Map` and `Set` from type guard:\n// - https://github.com/Microsoft/TypeScript/pull/29317\n// eslint-disable-next-line unicorn/no-array-callback-reference\nis.nonEmptyObject = value => is.object(value) && !is.map(value) && !is.set(value) && Object.keys(value).length > 0;\nis.emptySet = value => is.set(value) && value.size === 0;\nis.nonEmptySet = value => is.set(value) && value.size > 0;\n// eslint-disable-next-line unicorn/no-array-callback-reference\nis.emptyMap = value => is.map(value) && value.size === 0;\n// eslint-disable-next-line unicorn/no-array-callback-reference\nis.nonEmptyMap = value => is.map(value) && value.size > 0;\n// `PropertyKey` is any value that can be used as an object key (string, number, or symbol)\nis.propertyKey = value => is.any([is.string, is.number, is.symbol], value);\nis.formData = value => isObjectOfType('FormData')(value);\nis.urlSearchParams = value => isObjectOfType('URLSearchParams')(value);\nconst predicateOnArray = (method, predicate, values) => {\n  if (!is.function_(predicate)) {\n    throw new TypeError(`Invalid predicate: ${JSON.stringify(predicate)}`);\n  }\n  if (values.length === 0) {\n    throw new TypeError('Invalid number of values');\n  }\n  return method.call(values, predicate);\n};\nis.any = (predicate, ...values) => {\n  const predicates = is.array(predicate) ? predicate : [predicate];\n  return predicates.some(singlePredicate => predicateOnArray(Array.prototype.some, singlePredicate, values));\n};\nis.all = (predicate, ...values) => predicateOnArray(Array.prototype.every, predicate, values);\nconst assertType = (condition, description, value, options = {}) => {\n  if (!condition) {\n    const {\n      multipleValues\n    } = options;\n    const valuesMessage = multipleValues ? `received values of types ${[...new Set(value.map(singleValue => `\\`${is(singleValue)}\\``))].join(', ')}` : `received value of type \\`${is(value)}\\``;\n    throw new TypeError(`Expected value which is \\`${description}\\`, ${valuesMessage}.`);\n  }\n};\n/* eslint-disable @typescript-eslint/no-confusing-void-expression */\nexport const assert = {\n  // Unknowns.\n  undefined: value => assertType(is.undefined(value), 'undefined', value),\n  string: value => assertType(is.string(value), 'string', value),\n  number: value => assertType(is.number(value), 'number', value),\n  positiveNumber: value => assertType(is.positiveNumber(value), \"positive number\" /* AssertionTypeDescription.positiveNumber */, value),\n  negativeNumber: value => assertType(is.negativeNumber(value), \"negative number\" /* AssertionTypeDescription.negativeNumber */, value),\n  bigint: value => assertType(is.bigint(value), 'bigint', value),\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  function_: value => assertType(is.function_(value), 'Function', value),\n  null_: value => assertType(is.null_(value), 'null', value),\n  class_: value => assertType(is.class_(value), \"Class\" /* AssertionTypeDescription.class_ */, value),\n  boolean: value => assertType(is.boolean(value), 'boolean', value),\n  symbol: value => assertType(is.symbol(value), 'symbol', value),\n  numericString: value => assertType(is.numericString(value), \"string with a number\" /* AssertionTypeDescription.numericString */, value),\n  array: (value, assertion) => {\n    const assert = assertType;\n    assert(is.array(value), 'Array', value);\n    if (assertion) {\n      // eslint-disable-next-line unicorn/no-array-for-each, unicorn/no-array-callback-reference\n      value.forEach(assertion);\n    }\n  },\n  buffer: value => assertType(is.buffer(value), 'Buffer', value),\n  blob: value => assertType(is.blob(value), 'Blob', value),\n  nullOrUndefined: value => assertType(is.nullOrUndefined(value), \"null or undefined\" /* AssertionTypeDescription.nullOrUndefined */, value),\n  object: value => assertType(is.object(value), 'Object', value),\n  iterable: value => assertType(is.iterable(value), \"Iterable\" /* AssertionTypeDescription.iterable */, value),\n  asyncIterable: value => assertType(is.asyncIterable(value), \"AsyncIterable\" /* AssertionTypeDescription.asyncIterable */, value),\n  generator: value => assertType(is.generator(value), 'Generator', value),\n  asyncGenerator: value => assertType(is.asyncGenerator(value), 'AsyncGenerator', value),\n  nativePromise: value => assertType(is.nativePromise(value), \"native Promise\" /* AssertionTypeDescription.nativePromise */, value),\n  promise: value => assertType(is.promise(value), 'Promise', value),\n  generatorFunction: value => assertType(is.generatorFunction(value), 'GeneratorFunction', value),\n  asyncGeneratorFunction: value => assertType(is.asyncGeneratorFunction(value), 'AsyncGeneratorFunction', value),\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  asyncFunction: value => assertType(is.asyncFunction(value), 'AsyncFunction', value),\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  boundFunction: value => assertType(is.boundFunction(value), 'Function', value),\n  regExp: value => assertType(is.regExp(value), 'RegExp', value),\n  date: value => assertType(is.date(value), 'Date', value),\n  error: value => assertType(is.error(value), 'Error', value),\n  map: value => assertType(is.map(value), 'Map', value),\n  set: value => assertType(is.set(value), 'Set', value),\n  weakMap: value => assertType(is.weakMap(value), 'WeakMap', value),\n  weakSet: value => assertType(is.weakSet(value), 'WeakSet', value),\n  weakRef: value => assertType(is.weakRef(value), 'WeakRef', value),\n  int8Array: value => assertType(is.int8Array(value), 'Int8Array', value),\n  uint8Array: value => assertType(is.uint8Array(value), 'Uint8Array', value),\n  uint8ClampedArray: value => assertType(is.uint8ClampedArray(value), 'Uint8ClampedArray', value),\n  int16Array: value => assertType(is.int16Array(value), 'Int16Array', value),\n  uint16Array: value => assertType(is.uint16Array(value), 'Uint16Array', value),\n  int32Array: value => assertType(is.int32Array(value), 'Int32Array', value),\n  uint32Array: value => assertType(is.uint32Array(value), 'Uint32Array', value),\n  float32Array: value => assertType(is.float32Array(value), 'Float32Array', value),\n  float64Array: value => assertType(is.float64Array(value), 'Float64Array', value),\n  bigInt64Array: value => assertType(is.bigInt64Array(value), 'BigInt64Array', value),\n  bigUint64Array: value => assertType(is.bigUint64Array(value), 'BigUint64Array', value),\n  arrayBuffer: value => assertType(is.arrayBuffer(value), 'ArrayBuffer', value),\n  sharedArrayBuffer: value => assertType(is.sharedArrayBuffer(value), 'SharedArrayBuffer', value),\n  dataView: value => assertType(is.dataView(value), 'DataView', value),\n  enumCase: (value, targetEnum) => assertType(is.enumCase(value, targetEnum), 'EnumCase', value),\n  urlInstance: value => assertType(is.urlInstance(value), 'URL', value),\n  urlString: value => assertType(is.urlString(value), \"string with a URL\" /* AssertionTypeDescription.urlString */, value),\n  truthy: value => assertType(is.truthy(value), \"truthy\" /* AssertionTypeDescription.truthy */, value),\n  falsy: value => assertType(is.falsy(value), \"falsy\" /* AssertionTypeDescription.falsy */, value),\n  nan: value => assertType(is.nan(value), \"NaN\" /* AssertionTypeDescription.nan */, value),\n  primitive: value => assertType(is.primitive(value), \"primitive\" /* AssertionTypeDescription.primitive */, value),\n  integer: value => assertType(is.integer(value), \"integer\" /* AssertionTypeDescription.integer */, value),\n  safeInteger: value => assertType(is.safeInteger(value), \"integer\" /* AssertionTypeDescription.safeInteger */, value),\n  plainObject: value => assertType(is.plainObject(value), \"plain object\" /* AssertionTypeDescription.plainObject */, value),\n  typedArray: value => assertType(is.typedArray(value), \"TypedArray\" /* AssertionTypeDescription.typedArray */, value),\n  arrayLike: value => assertType(is.arrayLike(value), \"array-like\" /* AssertionTypeDescription.arrayLike */, value),\n  tupleLike: (value, guards) => assertType(is.tupleLike(value, guards), \"tuple-like\" /* AssertionTypeDescription.tupleLike */, value),\n  domElement: value => assertType(is.domElement(value), \"HTMLElement\" /* AssertionTypeDescription.domElement */, value),\n  observable: value => assertType(is.observable(value), 'Observable', value),\n  nodeStream: value => assertType(is.nodeStream(value), \"Node.js Stream\" /* AssertionTypeDescription.nodeStream */, value),\n  infinite: value => assertType(is.infinite(value), \"infinite number\" /* AssertionTypeDescription.infinite */, value),\n  emptyArray: value => assertType(is.emptyArray(value), \"empty array\" /* AssertionTypeDescription.emptyArray */, value),\n  nonEmptyArray: value => assertType(is.nonEmptyArray(value), \"non-empty array\" /* AssertionTypeDescription.nonEmptyArray */, value),\n  emptyString: value => assertType(is.emptyString(value), \"empty string\" /* AssertionTypeDescription.emptyString */, value),\n  emptyStringOrWhitespace: value => assertType(is.emptyStringOrWhitespace(value), \"empty string or whitespace\" /* AssertionTypeDescription.emptyStringOrWhitespace */, value),\n  nonEmptyString: value => assertType(is.nonEmptyString(value), \"non-empty string\" /* AssertionTypeDescription.nonEmptyString */, value),\n  nonEmptyStringAndNotWhitespace: value => assertType(is.nonEmptyStringAndNotWhitespace(value), \"non-empty string and not whitespace\" /* AssertionTypeDescription.nonEmptyStringAndNotWhitespace */, value),\n  emptyObject: value => assertType(is.emptyObject(value), \"empty object\" /* AssertionTypeDescription.emptyObject */, value),\n  nonEmptyObject: value => assertType(is.nonEmptyObject(value), \"non-empty object\" /* AssertionTypeDescription.nonEmptyObject */, value),\n  emptySet: value => assertType(is.emptySet(value), \"empty set\" /* AssertionTypeDescription.emptySet */, value),\n  nonEmptySet: value => assertType(is.nonEmptySet(value), \"non-empty set\" /* AssertionTypeDescription.nonEmptySet */, value),\n  emptyMap: value => assertType(is.emptyMap(value), \"empty map\" /* AssertionTypeDescription.emptyMap */, value),\n  nonEmptyMap: value => assertType(is.nonEmptyMap(value), \"non-empty map\" /* AssertionTypeDescription.nonEmptyMap */, value),\n  propertyKey: value => assertType(is.propertyKey(value), 'PropertyKey', value),\n  formData: value => assertType(is.formData(value), 'FormData', value),\n  urlSearchParams: value => assertType(is.urlSearchParams(value), 'URLSearchParams', value),\n  // Numbers.\n  evenInteger: value => assertType(is.evenInteger(value), \"even integer\" /* AssertionTypeDescription.evenInteger */, value),\n  oddInteger: value => assertType(is.oddInteger(value), \"odd integer\" /* AssertionTypeDescription.oddInteger */, value),\n  // Two arguments.\n  directInstanceOf: (instance, class_) => assertType(is.directInstanceOf(instance, class_), \"T\" /* AssertionTypeDescription.directInstanceOf */, instance),\n  inRange: (value, range) => assertType(is.inRange(value, range), \"in range\" /* AssertionTypeDescription.inRange */, value),\n  // Variadic functions.\n  any: (predicate, ...values) => assertType(is.any(predicate, ...values), \"predicate returns truthy for any value\" /* AssertionTypeDescription.any */, values, {\n    multipleValues: true\n  }),\n  all: (predicate, ...values) => assertType(is.all(predicate, ...values), \"predicate returns truthy for all values\" /* AssertionTypeDescription.all */, values, {\n    multipleValues: true\n  })\n};\n/* eslint-enable @typescript-eslint/no-confusing-void-expression */\n// Some few keywords are reserved, but we'll populate them for Node.js users\n// See https://github.com/Microsoft/TypeScript/issues/2536\nObject.defineProperties(is, {\n  class: {\n    value: is.class_\n  },\n  function: {\n    value: is.function_\n  },\n  null: {\n    value: is.null_\n  }\n});\nObject.defineProperties(assert, {\n  class: {\n    value: assert.class_\n  },\n  function: {\n    value: assert.function_\n  },\n  null: {\n    value: assert.null_\n  }\n});\nexport default is;","map":{"version":3,"names":["typedArrayTypeNames","isTypedArrayName","name","includes","objectTypeNames","isObjectTypeName","primitiveTypeNames","isPrimitiveTypeName","isOfType","type","value","toString","Object","prototype","getObjectType","objectTypeName","call","slice","test","is","domElement","undefined","isObjectOfType","Number","isNaN","observable","array","buffer","tagType","String","Boolean","TypeError","string","isNumberType","number","nan","positiveNumber","negativeNumber","bigint","function_","null_","class_","startsWith","boolean","symbol","numericString","emptyStringOrWhitespace","assertion","Array","isArray","every","element","constructor","isBuffer","blob","nullOrUndefined","object","iterable","Symbol","iterator","asyncIterable","asyncIterator","generator","next","throw","asyncGenerator","nativePromise","hasPromiseApi","then","catch","promise","generatorFunction","asyncGeneratorFunction","asyncFunction","boundFunction","hasOwnProperty","regExp","date","error","map","set","weakMap","weakSet","weakRef","int8Array","uint8Array","uint8ClampedArray","int16Array","uint16Array","int32Array","uint32Array","float32Array","float64Array","bigInt64Array","bigUint64Array","arrayBuffer","sharedArrayBuffer","dataView","enumCase","targetEnum","values","directInstanceOf","instance","getPrototypeOf","urlInstance","urlString","URL","truthy","falsy","primitive","integer","isInteger","safeInteger","isSafeInteger","plainObject","toStringTag","typedArray","isValidLength","arrayLike","length","tupleLike","guards","guard","index","inRange","range","Math","min","max","JSON","stringify","NODE_TYPE_ELEMENT","DOM_PROPERTIES_TO_CHECK","nodeType","nodeName","property","nodeStream","pipe","infinite","POSITIVE_INFINITY","NEGATIVE_INFINITY","isAbsoluteMod2","remainder","abs","evenInteger","oddInteger","emptyArray","nonEmptyArray","emptyString","isWhiteSpaceString","nonEmptyString","nonEmptyStringAndNotWhitespace","emptyObject","keys","nonEmptyObject","emptySet","size","nonEmptySet","emptyMap","nonEmptyMap","propertyKey","any","formData","urlSearchParams","predicateOnArray","method","predicate","predicates","some","singlePredicate","all","assertType","condition","description","options","multipleValues","valuesMessage","Set","singleValue","join","assert","forEach","defineProperties","class","function","null"],"sources":["D:/LangChainJS/chatpdf/node_modules/@sindresorhus/is/dist/index.js"],"sourcesContent":["const typedArrayTypeNames = [\n    'Int8Array',\n    'Uint8Array',\n    'Uint8ClampedArray',\n    'Int16Array',\n    'Uint16Array',\n    'Int32Array',\n    'Uint32Array',\n    'Float32Array',\n    'Float64Array',\n    'BigInt64Array',\n    'BigUint64Array',\n];\nfunction isTypedArrayName(name) {\n    return typedArrayTypeNames.includes(name);\n}\nconst objectTypeNames = [\n    'Function',\n    'Generator',\n    'AsyncGenerator',\n    'GeneratorFunction',\n    'AsyncGeneratorFunction',\n    'AsyncFunction',\n    'Observable',\n    'Array',\n    'Buffer',\n    'Blob',\n    'Object',\n    'RegExp',\n    'Date',\n    'Error',\n    'Map',\n    'Set',\n    'WeakMap',\n    'WeakSet',\n    'WeakRef',\n    'ArrayBuffer',\n    'SharedArrayBuffer',\n    'DataView',\n    'Promise',\n    'URL',\n    'FormData',\n    'URLSearchParams',\n    'HTMLElement',\n    'NaN',\n    ...typedArrayTypeNames,\n];\nfunction isObjectTypeName(name) {\n    return objectTypeNames.includes(name);\n}\nconst primitiveTypeNames = [\n    'null',\n    'undefined',\n    'string',\n    'number',\n    'bigint',\n    'boolean',\n    'symbol',\n];\nfunction isPrimitiveTypeName(name) {\n    return primitiveTypeNames.includes(name);\n}\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isOfType(type) {\n    return (value) => typeof value === type;\n}\nconst { toString } = Object.prototype;\nconst getObjectType = (value) => {\n    const objectTypeName = toString.call(value).slice(8, -1);\n    if (/HTML\\w+Element/.test(objectTypeName) && is.domElement(value)) {\n        return 'HTMLElement';\n    }\n    if (isObjectTypeName(objectTypeName)) {\n        return objectTypeName;\n    }\n    return undefined;\n};\nconst isObjectOfType = (type) => (value) => getObjectType(value) === type;\nfunction is(value) {\n    if (value === null) {\n        return 'null';\n    }\n    switch (typeof value) {\n        case 'undefined': {\n            return 'undefined';\n        }\n        case 'string': {\n            return 'string';\n        }\n        case 'number': {\n            return Number.isNaN(value) ? 'NaN' : 'number';\n        }\n        case 'boolean': {\n            return 'boolean';\n        }\n        case 'function': {\n            return 'Function';\n        }\n        case 'bigint': {\n            return 'bigint';\n        }\n        case 'symbol': {\n            return 'symbol';\n        }\n        default:\n    }\n    if (is.observable(value)) {\n        return 'Observable';\n    }\n    if (is.array(value)) {\n        return 'Array';\n    }\n    if (is.buffer(value)) {\n        return 'Buffer';\n    }\n    const tagType = getObjectType(value);\n    if (tagType) {\n        return tagType;\n    }\n    if (value instanceof String || value instanceof Boolean || value instanceof Number) {\n        throw new TypeError('Please don\\'t use object wrappers for primitive types');\n    }\n    return 'Object';\n}\nis.undefined = isOfType('undefined');\nis.string = isOfType('string');\nconst isNumberType = isOfType('number');\nis.number = (value) => isNumberType(value) && !is.nan(value);\nis.positiveNumber = (value) => is.number(value) && value > 0;\nis.negativeNumber = (value) => is.number(value) && value < 0;\nis.bigint = isOfType('bigint');\n// eslint-disable-next-line @typescript-eslint/ban-types\nis.function_ = isOfType('function');\n// eslint-disable-next-line @typescript-eslint/ban-types\nis.null_ = (value) => value === null;\nis.class_ = (value) => is.function_(value) && value.toString().startsWith('class ');\nis.boolean = (value) => value === true || value === false;\nis.symbol = isOfType('symbol');\nis.numericString = (value) => is.string(value) && !is.emptyStringOrWhitespace(value) && !Number.isNaN(Number(value));\nis.array = (value, assertion) => {\n    if (!Array.isArray(value)) {\n        return false;\n    }\n    if (!is.function_(assertion)) {\n        return true;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    return value.every(element => assertion(element));\n};\n// eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-call\nis.buffer = (value) => value?.constructor?.isBuffer?.(value) ?? false;\nis.blob = (value) => isObjectOfType('Blob')(value);\nis.nullOrUndefined = (value) => is.null_(value) || is.undefined(value); // eslint-disable-line @typescript-eslint/ban-types\nis.object = (value) => !is.null_(value) && (typeof value === 'object' || is.function_(value)); // eslint-disable-line @typescript-eslint/ban-types\nis.iterable = (value) => is.function_(value?.[Symbol.iterator]);\nis.asyncIterable = (value) => is.function_(value?.[Symbol.asyncIterator]);\nis.generator = (value) => is.iterable(value) && is.function_(value?.next) && is.function_(value?.throw);\nis.asyncGenerator = (value) => is.asyncIterable(value) && is.function_(value.next) && is.function_(value.throw);\nis.nativePromise = (value) => isObjectOfType('Promise')(value);\nconst hasPromiseApi = (value) => is.function_(value?.then)\n    && is.function_(value?.catch);\nis.promise = (value) => is.nativePromise(value) || hasPromiseApi(value);\nis.generatorFunction = isObjectOfType('GeneratorFunction');\nis.asyncGeneratorFunction = (value) => getObjectType(value) === 'AsyncGeneratorFunction';\nis.asyncFunction = (value) => getObjectType(value) === 'AsyncFunction';\n// eslint-disable-next-line no-prototype-builtins, @typescript-eslint/ban-types\nis.boundFunction = (value) => is.function_(value) && !value.hasOwnProperty('prototype');\nis.regExp = isObjectOfType('RegExp');\nis.date = isObjectOfType('Date');\nis.error = isObjectOfType('Error');\nis.map = (value) => isObjectOfType('Map')(value);\nis.set = (value) => isObjectOfType('Set')(value);\nis.weakMap = (value) => isObjectOfType('WeakMap')(value); // eslint-disable-line @typescript-eslint/ban-types\nis.weakSet = (value) => isObjectOfType('WeakSet')(value); // eslint-disable-line @typescript-eslint/ban-types\nis.weakRef = (value) => isObjectOfType('WeakRef')(value); // eslint-disable-line @typescript-eslint/ban-types\nis.int8Array = isObjectOfType('Int8Array');\nis.uint8Array = isObjectOfType('Uint8Array');\nis.uint8ClampedArray = isObjectOfType('Uint8ClampedArray');\nis.int16Array = isObjectOfType('Int16Array');\nis.uint16Array = isObjectOfType('Uint16Array');\nis.int32Array = isObjectOfType('Int32Array');\nis.uint32Array = isObjectOfType('Uint32Array');\nis.float32Array = isObjectOfType('Float32Array');\nis.float64Array = isObjectOfType('Float64Array');\nis.bigInt64Array = isObjectOfType('BigInt64Array');\nis.bigUint64Array = isObjectOfType('BigUint64Array');\nis.arrayBuffer = isObjectOfType('ArrayBuffer');\nis.sharedArrayBuffer = isObjectOfType('SharedArrayBuffer');\nis.dataView = isObjectOfType('DataView');\n// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\nis.enumCase = (value, targetEnum) => Object.values(targetEnum).includes(value);\nis.directInstanceOf = (instance, class_) => Object.getPrototypeOf(instance) === class_.prototype;\nis.urlInstance = (value) => isObjectOfType('URL')(value);\nis.urlString = (value) => {\n    if (!is.string(value)) {\n        return false;\n    }\n    try {\n        new URL(value); // eslint-disable-line no-new\n        return true;\n    }\n    catch {\n        return false;\n    }\n};\n// Example: `is.truthy = (value: unknown): value is (not false | not 0 | not '' | not undefined | not null) => Boolean(value);`\nis.truthy = (value) => Boolean(value); // eslint-disable-line unicorn/prefer-native-coercion-functions\n// Example: `is.falsy = (value: unknown): value is (not true | 0 | '' | undefined | null) => Boolean(value);`\nis.falsy = (value) => !value;\nis.nan = (value) => Number.isNaN(value);\nis.primitive = (value) => is.null_(value) || isPrimitiveTypeName(typeof value);\nis.integer = (value) => Number.isInteger(value);\nis.safeInteger = (value) => Number.isSafeInteger(value);\nis.plainObject = (value) => {\n    // From: https://github.com/sindresorhus/is-plain-obj/blob/main/index.js\n    if (typeof value !== 'object' || value === null) {\n        return false;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const prototype = Object.getPrototypeOf(value);\n    return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n};\nis.typedArray = (value) => isTypedArrayName(getObjectType(value));\nconst isValidLength = (value) => is.safeInteger(value) && value >= 0;\nis.arrayLike = (value) => !is.nullOrUndefined(value) && !is.function_(value) && isValidLength(value.length);\nis.tupleLike = (value, guards) => {\n    if (is.array(guards) && is.array(value) && guards.length === value.length) {\n        return guards.every((guard, index) => guard(value[index]));\n    }\n    return false;\n};\nis.inRange = (value, range) => {\n    if (is.number(range)) {\n        return value >= Math.min(0, range) && value <= Math.max(range, 0);\n    }\n    if (is.array(range) && range.length === 2) {\n        return value >= Math.min(...range) && value <= Math.max(...range);\n    }\n    throw new TypeError(`Invalid range: ${JSON.stringify(range)}`);\n};\n// eslint-disable-next-line @typescript-eslint/naming-convention\nconst NODE_TYPE_ELEMENT = 1;\n// eslint-disable-next-line @typescript-eslint/naming-convention\nconst DOM_PROPERTIES_TO_CHECK = [\n    'innerHTML',\n    'ownerDocument',\n    'style',\n    'attributes',\n    'nodeValue',\n];\nis.domElement = (value) => is.object(value)\n    && value.nodeType === NODE_TYPE_ELEMENT\n    && is.string(value.nodeName)\n    && !is.plainObject(value)\n    && DOM_PROPERTIES_TO_CHECK.every(property => property in value);\nis.observable = (value) => {\n    if (!value) {\n        return false;\n    }\n    // eslint-disable-next-line no-use-extend-native/no-use-extend-native, @typescript-eslint/no-unsafe-call\n    if (value === value[Symbol.observable]?.()) {\n        return true;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n    if (value === value['@@observable']?.()) {\n        return true;\n    }\n    return false;\n};\nis.nodeStream = (value) => is.object(value) && is.function_(value.pipe) && !is.observable(value);\nis.infinite = (value) => value === Number.POSITIVE_INFINITY || value === Number.NEGATIVE_INFINITY;\nconst isAbsoluteMod2 = (remainder) => (value) => is.integer(value) && Math.abs(value % 2) === remainder;\nis.evenInteger = isAbsoluteMod2(0);\nis.oddInteger = isAbsoluteMod2(1);\nis.emptyArray = (value) => is.array(value) && value.length === 0;\nis.nonEmptyArray = (value) => is.array(value) && value.length > 0;\nis.emptyString = (value) => is.string(value) && value.length === 0;\nconst isWhiteSpaceString = (value) => is.string(value) && !/\\S/.test(value);\nis.emptyStringOrWhitespace = (value) => is.emptyString(value) || isWhiteSpaceString(value);\n// TODO: Use `not ''` when the `not` operator is available.\nis.nonEmptyString = (value) => is.string(value) && value.length > 0;\n// TODO: Use `not ''` when the `not` operator is available.\nis.nonEmptyStringAndNotWhitespace = (value) => is.string(value) && !is.emptyStringOrWhitespace(value);\n// eslint-disable-next-line unicorn/no-array-callback-reference\nis.emptyObject = (value) => is.object(value) && !is.map(value) && !is.set(value) && Object.keys(value).length === 0;\n// TODO: Use `not` operator here to remove `Map` and `Set` from type guard:\n// - https://github.com/Microsoft/TypeScript/pull/29317\n// eslint-disable-next-line unicorn/no-array-callback-reference\nis.nonEmptyObject = (value) => is.object(value) && !is.map(value) && !is.set(value) && Object.keys(value).length > 0;\nis.emptySet = (value) => is.set(value) && value.size === 0;\nis.nonEmptySet = (value) => is.set(value) && value.size > 0;\n// eslint-disable-next-line unicorn/no-array-callback-reference\nis.emptyMap = (value) => is.map(value) && value.size === 0;\n// eslint-disable-next-line unicorn/no-array-callback-reference\nis.nonEmptyMap = (value) => is.map(value) && value.size > 0;\n// `PropertyKey` is any value that can be used as an object key (string, number, or symbol)\nis.propertyKey = (value) => is.any([is.string, is.number, is.symbol], value);\nis.formData = (value) => isObjectOfType('FormData')(value);\nis.urlSearchParams = (value) => isObjectOfType('URLSearchParams')(value);\nconst predicateOnArray = (method, predicate, values) => {\n    if (!is.function_(predicate)) {\n        throw new TypeError(`Invalid predicate: ${JSON.stringify(predicate)}`);\n    }\n    if (values.length === 0) {\n        throw new TypeError('Invalid number of values');\n    }\n    return method.call(values, predicate);\n};\nis.any = (predicate, ...values) => {\n    const predicates = is.array(predicate) ? predicate : [predicate];\n    return predicates.some(singlePredicate => predicateOnArray(Array.prototype.some, singlePredicate, values));\n};\nis.all = (predicate, ...values) => predicateOnArray(Array.prototype.every, predicate, values);\nconst assertType = (condition, description, value, options = {}) => {\n    if (!condition) {\n        const { multipleValues } = options;\n        const valuesMessage = multipleValues\n            ? `received values of types ${[\n                ...new Set(value.map(singleValue => `\\`${is(singleValue)}\\``)),\n            ].join(', ')}`\n            : `received value of type \\`${is(value)}\\``;\n        throw new TypeError(`Expected value which is \\`${description}\\`, ${valuesMessage}.`);\n    }\n};\n/* eslint-disable @typescript-eslint/no-confusing-void-expression */\nexport const assert = {\n    // Unknowns.\n    undefined: (value) => assertType(is.undefined(value), 'undefined', value),\n    string: (value) => assertType(is.string(value), 'string', value),\n    number: (value) => assertType(is.number(value), 'number', value),\n    positiveNumber: (value) => assertType(is.positiveNumber(value), \"positive number\" /* AssertionTypeDescription.positiveNumber */, value),\n    negativeNumber: (value) => assertType(is.negativeNumber(value), \"negative number\" /* AssertionTypeDescription.negativeNumber */, value),\n    bigint: (value) => assertType(is.bigint(value), 'bigint', value),\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    function_: (value) => assertType(is.function_(value), 'Function', value),\n    null_: (value) => assertType(is.null_(value), 'null', value),\n    class_: (value) => assertType(is.class_(value), \"Class\" /* AssertionTypeDescription.class_ */, value),\n    boolean: (value) => assertType(is.boolean(value), 'boolean', value),\n    symbol: (value) => assertType(is.symbol(value), 'symbol', value),\n    numericString: (value) => assertType(is.numericString(value), \"string with a number\" /* AssertionTypeDescription.numericString */, value),\n    array: (value, assertion) => {\n        const assert = assertType;\n        assert(is.array(value), 'Array', value);\n        if (assertion) {\n            // eslint-disable-next-line unicorn/no-array-for-each, unicorn/no-array-callback-reference\n            value.forEach(assertion);\n        }\n    },\n    buffer: (value) => assertType(is.buffer(value), 'Buffer', value),\n    blob: (value) => assertType(is.blob(value), 'Blob', value),\n    nullOrUndefined: (value) => assertType(is.nullOrUndefined(value), \"null or undefined\" /* AssertionTypeDescription.nullOrUndefined */, value),\n    object: (value) => assertType(is.object(value), 'Object', value),\n    iterable: (value) => assertType(is.iterable(value), \"Iterable\" /* AssertionTypeDescription.iterable */, value),\n    asyncIterable: (value) => assertType(is.asyncIterable(value), \"AsyncIterable\" /* AssertionTypeDescription.asyncIterable */, value),\n    generator: (value) => assertType(is.generator(value), 'Generator', value),\n    asyncGenerator: (value) => assertType(is.asyncGenerator(value), 'AsyncGenerator', value),\n    nativePromise: (value) => assertType(is.nativePromise(value), \"native Promise\" /* AssertionTypeDescription.nativePromise */, value),\n    promise: (value) => assertType(is.promise(value), 'Promise', value),\n    generatorFunction: (value) => assertType(is.generatorFunction(value), 'GeneratorFunction', value),\n    asyncGeneratorFunction: (value) => assertType(is.asyncGeneratorFunction(value), 'AsyncGeneratorFunction', value),\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    asyncFunction: (value) => assertType(is.asyncFunction(value), 'AsyncFunction', value),\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    boundFunction: (value) => assertType(is.boundFunction(value), 'Function', value),\n    regExp: (value) => assertType(is.regExp(value), 'RegExp', value),\n    date: (value) => assertType(is.date(value), 'Date', value),\n    error: (value) => assertType(is.error(value), 'Error', value),\n    map: (value) => assertType(is.map(value), 'Map', value),\n    set: (value) => assertType(is.set(value), 'Set', value),\n    weakMap: (value) => assertType(is.weakMap(value), 'WeakMap', value),\n    weakSet: (value) => assertType(is.weakSet(value), 'WeakSet', value),\n    weakRef: (value) => assertType(is.weakRef(value), 'WeakRef', value),\n    int8Array: (value) => assertType(is.int8Array(value), 'Int8Array', value),\n    uint8Array: (value) => assertType(is.uint8Array(value), 'Uint8Array', value),\n    uint8ClampedArray: (value) => assertType(is.uint8ClampedArray(value), 'Uint8ClampedArray', value),\n    int16Array: (value) => assertType(is.int16Array(value), 'Int16Array', value),\n    uint16Array: (value) => assertType(is.uint16Array(value), 'Uint16Array', value),\n    int32Array: (value) => assertType(is.int32Array(value), 'Int32Array', value),\n    uint32Array: (value) => assertType(is.uint32Array(value), 'Uint32Array', value),\n    float32Array: (value) => assertType(is.float32Array(value), 'Float32Array', value),\n    float64Array: (value) => assertType(is.float64Array(value), 'Float64Array', value),\n    bigInt64Array: (value) => assertType(is.bigInt64Array(value), 'BigInt64Array', value),\n    bigUint64Array: (value) => assertType(is.bigUint64Array(value), 'BigUint64Array', value),\n    arrayBuffer: (value) => assertType(is.arrayBuffer(value), 'ArrayBuffer', value),\n    sharedArrayBuffer: (value) => assertType(is.sharedArrayBuffer(value), 'SharedArrayBuffer', value),\n    dataView: (value) => assertType(is.dataView(value), 'DataView', value),\n    enumCase: (value, targetEnum) => assertType(is.enumCase(value, targetEnum), 'EnumCase', value),\n    urlInstance: (value) => assertType(is.urlInstance(value), 'URL', value),\n    urlString: (value) => assertType(is.urlString(value), \"string with a URL\" /* AssertionTypeDescription.urlString */, value),\n    truthy: (value) => assertType(is.truthy(value), \"truthy\" /* AssertionTypeDescription.truthy */, value),\n    falsy: (value) => assertType(is.falsy(value), \"falsy\" /* AssertionTypeDescription.falsy */, value),\n    nan: (value) => assertType(is.nan(value), \"NaN\" /* AssertionTypeDescription.nan */, value),\n    primitive: (value) => assertType(is.primitive(value), \"primitive\" /* AssertionTypeDescription.primitive */, value),\n    integer: (value) => assertType(is.integer(value), \"integer\" /* AssertionTypeDescription.integer */, value),\n    safeInteger: (value) => assertType(is.safeInteger(value), \"integer\" /* AssertionTypeDescription.safeInteger */, value),\n    plainObject: (value) => assertType(is.plainObject(value), \"plain object\" /* AssertionTypeDescription.plainObject */, value),\n    typedArray: (value) => assertType(is.typedArray(value), \"TypedArray\" /* AssertionTypeDescription.typedArray */, value),\n    arrayLike: (value) => assertType(is.arrayLike(value), \"array-like\" /* AssertionTypeDescription.arrayLike */, value),\n    tupleLike: (value, guards) => assertType(is.tupleLike(value, guards), \"tuple-like\" /* AssertionTypeDescription.tupleLike */, value),\n    domElement: (value) => assertType(is.domElement(value), \"HTMLElement\" /* AssertionTypeDescription.domElement */, value),\n    observable: (value) => assertType(is.observable(value), 'Observable', value),\n    nodeStream: (value) => assertType(is.nodeStream(value), \"Node.js Stream\" /* AssertionTypeDescription.nodeStream */, value),\n    infinite: (value) => assertType(is.infinite(value), \"infinite number\" /* AssertionTypeDescription.infinite */, value),\n    emptyArray: (value) => assertType(is.emptyArray(value), \"empty array\" /* AssertionTypeDescription.emptyArray */, value),\n    nonEmptyArray: (value) => assertType(is.nonEmptyArray(value), \"non-empty array\" /* AssertionTypeDescription.nonEmptyArray */, value),\n    emptyString: (value) => assertType(is.emptyString(value), \"empty string\" /* AssertionTypeDescription.emptyString */, value),\n    emptyStringOrWhitespace: (value) => assertType(is.emptyStringOrWhitespace(value), \"empty string or whitespace\" /* AssertionTypeDescription.emptyStringOrWhitespace */, value),\n    nonEmptyString: (value) => assertType(is.nonEmptyString(value), \"non-empty string\" /* AssertionTypeDescription.nonEmptyString */, value),\n    nonEmptyStringAndNotWhitespace: (value) => assertType(is.nonEmptyStringAndNotWhitespace(value), \"non-empty string and not whitespace\" /* AssertionTypeDescription.nonEmptyStringAndNotWhitespace */, value),\n    emptyObject: (value) => assertType(is.emptyObject(value), \"empty object\" /* AssertionTypeDescription.emptyObject */, value),\n    nonEmptyObject: (value) => assertType(is.nonEmptyObject(value), \"non-empty object\" /* AssertionTypeDescription.nonEmptyObject */, value),\n    emptySet: (value) => assertType(is.emptySet(value), \"empty set\" /* AssertionTypeDescription.emptySet */, value),\n    nonEmptySet: (value) => assertType(is.nonEmptySet(value), \"non-empty set\" /* AssertionTypeDescription.nonEmptySet */, value),\n    emptyMap: (value) => assertType(is.emptyMap(value), \"empty map\" /* AssertionTypeDescription.emptyMap */, value),\n    nonEmptyMap: (value) => assertType(is.nonEmptyMap(value), \"non-empty map\" /* AssertionTypeDescription.nonEmptyMap */, value),\n    propertyKey: (value) => assertType(is.propertyKey(value), 'PropertyKey', value),\n    formData: (value) => assertType(is.formData(value), 'FormData', value),\n    urlSearchParams: (value) => assertType(is.urlSearchParams(value), 'URLSearchParams', value),\n    // Numbers.\n    evenInteger: (value) => assertType(is.evenInteger(value), \"even integer\" /* AssertionTypeDescription.evenInteger */, value),\n    oddInteger: (value) => assertType(is.oddInteger(value), \"odd integer\" /* AssertionTypeDescription.oddInteger */, value),\n    // Two arguments.\n    directInstanceOf: (instance, class_) => assertType(is.directInstanceOf(instance, class_), \"T\" /* AssertionTypeDescription.directInstanceOf */, instance),\n    inRange: (value, range) => assertType(is.inRange(value, range), \"in range\" /* AssertionTypeDescription.inRange */, value),\n    // Variadic functions.\n    any: (predicate, ...values) => assertType(is.any(predicate, ...values), \"predicate returns truthy for any value\" /* AssertionTypeDescription.any */, values, { multipleValues: true }),\n    all: (predicate, ...values) => assertType(is.all(predicate, ...values), \"predicate returns truthy for all values\" /* AssertionTypeDescription.all */, values, { multipleValues: true }),\n};\n/* eslint-enable @typescript-eslint/no-confusing-void-expression */\n// Some few keywords are reserved, but we'll populate them for Node.js users\n// See https://github.com/Microsoft/TypeScript/issues/2536\nObject.defineProperties(is, {\n    class: {\n        value: is.class_,\n    },\n    function: {\n        value: is.function_,\n    },\n    null: {\n        value: is.null_,\n    },\n});\nObject.defineProperties(assert, {\n    class: {\n        value: assert.class_,\n    },\n    function: {\n        value: assert.function_,\n    },\n    null: {\n        value: assert.null_,\n    },\n});\nexport default is;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}