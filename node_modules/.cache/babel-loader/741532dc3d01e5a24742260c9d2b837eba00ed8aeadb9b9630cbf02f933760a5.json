{"ast":null,"code":"// source/parsers/excel.ts\n// The text extracter for Excel files.\nimport Xlsx, { utils as sheetUtils } from 'xlsx';\nimport { dump as convertToYaml } from 'js-yaml';\nconst parseExcelFile = Xlsx.read;\nconst convertSheetToJson = sheetUtils.sheet_to_json;\nexport class ExcelExtractor {\n  constructor() {\n    /**\n     * The type(s) of input acceptable to this method.\n     */\n    this.mimes = ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'];\n    /**\n     * Extract text from a Excel file if possible.\n     *\n     * @param payload The input and its type.\n     * @returns The text extracted from the input.\n     */\n    this.apply = async input => {\n      // Read the contents of the Excel file and convert them to JSON.\n      const workbook = parseExcelFile(input, {\n        type: 'buffer'\n      });\n      // Get the names of all the sheets, loop through the sheets and return\n      // nicely formatted text.\n      const sheets = workbook.SheetNames;\n      let formattedText = '';\n      for (const sheet of sheets) {\n        // Add the sheet separator to indicate a new sheet has started.\n        formattedText += '===\\n';\n        const sheetJson = convertSheetToJson(workbook.Sheets[sheet]);\n        for (const row of sheetJson) {\n          formattedText += '---\\n';\n          formattedText += convertToYaml(row)\n          // If the column header is empty, the YAML converter replaces it with '__EMPTY'.\n          // Replace that with just underscore + the column number instead.\n          .replace(/__EMPTY*:/g, ':').replace(/__EMPTY_\\d?:/g, ':');\n        }\n      }\n      return formattedText;\n    };\n  }\n}","map":{"version":3,"names":["Xlsx","utils","sheetUtils","dump","convertToYaml","parseExcelFile","read","convertSheetToJson","sheet_to_json","ExcelExtractor","constructor","mimes","apply","input","workbook","type","sheets","SheetNames","formattedText","sheet","sheetJson","Sheets","row","replace"],"sources":["D:/LangChainJS/chatpdf/node_modules/office-text-extractor/build/parsers/excel.js"],"sourcesContent":["// source/parsers/excel.ts\n// The text extracter for Excel files.\nimport Xlsx, { utils as sheetUtils } from 'xlsx';\nimport { dump as convertToYaml } from 'js-yaml';\nconst parseExcelFile = Xlsx.read;\nconst convertSheetToJson = sheetUtils.sheet_to_json;\nexport class ExcelExtractor {\n    constructor() {\n        /**\n         * The type(s) of input acceptable to this method.\n         */\n        this.mimes = ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'];\n        /**\n         * Extract text from a Excel file if possible.\n         *\n         * @param payload The input and its type.\n         * @returns The text extracted from the input.\n         */\n        this.apply = async (input) => {\n            // Read the contents of the Excel file and convert them to JSON.\n            const workbook = parseExcelFile(input, { type: 'buffer' });\n            // Get the names of all the sheets, loop through the sheets and return\n            // nicely formatted text.\n            const sheets = workbook.SheetNames;\n            let formattedText = '';\n            for (const sheet of sheets) {\n                // Add the sheet separator to indicate a new sheet has started.\n                formattedText += '===\\n';\n                const sheetJson = convertSheetToJson(workbook.Sheets[sheet]);\n                for (const row of sheetJson) {\n                    formattedText += '---\\n';\n                    formattedText += convertToYaml(row)\n                        // If the column header is empty, the YAML converter replaces it with '__EMPTY'.\n                        // Replace that with just underscore + the column number instead.\n                        .replace(/__EMPTY*:/g, ':')\n                        .replace(/__EMPTY_\\d?:/g, ':');\n                }\n            }\n            return formattedText;\n        };\n    }\n}\n"],"mappings":"AAAA;AACA;AACA,OAAOA,IAAI,IAAIC,KAAK,IAAIC,UAAU,QAAQ,MAAM;AAChD,SAASC,IAAI,IAAIC,aAAa,QAAQ,SAAS;AAC/C,MAAMC,cAAc,GAAGL,IAAI,CAACM,IAAI;AAChC,MAAMC,kBAAkB,GAAGL,UAAU,CAACM,aAAa;AACnD,OAAO,MAAMC,cAAc,CAAC;EACxBC,WAAWA,CAAA,EAAG;IACV;AACR;AACA;IACQ,IAAI,CAACC,KAAK,GAAG,CAAC,mEAAmE,CAAC;IAClF;AACR;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,KAAK,GAAG,MAAOC,KAAK,IAAK;MAC1B;MACA,MAAMC,QAAQ,GAAGT,cAAc,CAACQ,KAAK,EAAE;QAAEE,IAAI,EAAE;MAAS,CAAC,CAAC;MAC1D;MACA;MACA,MAAMC,MAAM,GAAGF,QAAQ,CAACG,UAAU;MAClC,IAAIC,aAAa,GAAG,EAAE;MACtB,KAAK,MAAMC,KAAK,IAAIH,MAAM,EAAE;QACxB;QACAE,aAAa,IAAI,OAAO;QACxB,MAAME,SAAS,GAAGb,kBAAkB,CAACO,QAAQ,CAACO,MAAM,CAACF,KAAK,CAAC,CAAC;QAC5D,KAAK,MAAMG,GAAG,IAAIF,SAAS,EAAE;UACzBF,aAAa,IAAI,OAAO;UACxBA,aAAa,IAAId,aAAa,CAACkB,GAAG;UAC9B;UACA;UAAA,CACCC,OAAO,CAAC,YAAY,EAAE,GAAG,CAAC,CAC1BA,OAAO,CAAC,eAAe,EAAE,GAAG,CAAC;QACtC;MACJ;MACA,OAAOL,aAAa;IACxB,CAAC;EACL;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}