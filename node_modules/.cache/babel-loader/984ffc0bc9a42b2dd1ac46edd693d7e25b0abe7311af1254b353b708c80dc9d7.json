{"ast":null,"code":"// source/parsers/docx.ts\n// The text extracter for DOCX files.\nimport { extractRawText as parseWordFile } from 'mammoth';\nexport class DocExtractor {\n  constructor() {\n    /**\n     * The type(s) of input acceptable to this method.\n     */\n    this.mimes = ['application/vnd.openxmlformats-officedocument.wordprocessingml.document'];\n    /**\n     * Extract text from a DOCX file if possible.\n     *\n     * @param payload The input and its type.\n     * @returns The text extracted from the input.\n     */\n    this.apply = async input => {\n      // Convert the DOCX to text and return the text.\n      const parsedDocx = await parseWordFile({\n        buffer: input\n      });\n      return parsedDocx.value;\n    };\n  }\n}","map":{"version":3,"names":["extractRawText","parseWordFile","DocExtractor","constructor","mimes","apply","input","parsedDocx","buffer","value"],"sources":["D:/LangChainJS/chatpdf/node_modules/office-text-extractor/build/parsers/doc.js"],"sourcesContent":["// source/parsers/docx.ts\n// The text extracter for DOCX files.\nimport { extractRawText as parseWordFile } from 'mammoth';\nexport class DocExtractor {\n    constructor() {\n        /**\n         * The type(s) of input acceptable to this method.\n         */\n        this.mimes = [\n            'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n        ];\n        /**\n         * Extract text from a DOCX file if possible.\n         *\n         * @param payload The input and its type.\n         * @returns The text extracted from the input.\n         */\n        this.apply = async (input) => {\n            // Convert the DOCX to text and return the text.\n            const parsedDocx = await parseWordFile({ buffer: input });\n            return parsedDocx.value;\n        };\n    }\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,cAAc,IAAIC,aAAa,QAAQ,SAAS;AACzD,OAAO,MAAMC,YAAY,CAAC;EACtBC,WAAWA,CAAA,EAAG;IACV;AACR;AACA;IACQ,IAAI,CAACC,KAAK,GAAG,CACT,yEAAyE,CAC5E;IACD;AACR;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,KAAK,GAAG,MAAOC,KAAK,IAAK;MAC1B;MACA,MAAMC,UAAU,GAAG,MAAMN,aAAa,CAAC;QAAEO,MAAM,EAAEF;MAAM,CAAC,CAAC;MACzD,OAAOC,UAAU,CAACE,KAAK;IAC3B,CAAC;EACL;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}