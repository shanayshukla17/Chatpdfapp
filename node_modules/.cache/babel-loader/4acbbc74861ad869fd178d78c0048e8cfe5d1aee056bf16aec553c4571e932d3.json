{"ast":null,"code":"const calculateRetryDelay = ({\n  attemptCount,\n  retryOptions,\n  error,\n  retryAfter,\n  computedValue\n}) => {\n  if (error.name === 'RetryError') {\n    return 1;\n  }\n  if (attemptCount > retryOptions.limit) {\n    return 0;\n  }\n  const hasMethod = retryOptions.methods.includes(error.options.method);\n  const hasErrorCode = retryOptions.errorCodes.includes(error.code);\n  const hasStatusCode = error.response && retryOptions.statusCodes.includes(error.response.statusCode);\n  if (!hasMethod || !hasErrorCode && !hasStatusCode) {\n    return 0;\n  }\n  if (error.response) {\n    if (retryAfter) {\n      // In this case `computedValue` is `options.request.timeout`\n      if (retryAfter > computedValue) {\n        return 0;\n      }\n      return retryAfter;\n    }\n    if (error.response.statusCode === 413) {\n      return 0;\n    }\n  }\n  const noise = Math.random() * retryOptions.noise;\n  return Math.min(2 ** (attemptCount - 1) * 1000, retryOptions.backoffLimit) + noise;\n};\nexport default calculateRetryDelay;","map":{"version":3,"names":["calculateRetryDelay","attemptCount","retryOptions","error","retryAfter","computedValue","name","limit","hasMethod","methods","includes","options","method","hasErrorCode","errorCodes","code","hasStatusCode","response","statusCodes","statusCode","noise","Math","random","min","backoffLimit"],"sources":["D:/LangChainJS/chatpdf/node_modules/got/dist/source/core/calculate-retry-delay.js"],"sourcesContent":["const calculateRetryDelay = ({ attemptCount, retryOptions, error, retryAfter, computedValue, }) => {\n    if (error.name === 'RetryError') {\n        return 1;\n    }\n    if (attemptCount > retryOptions.limit) {\n        return 0;\n    }\n    const hasMethod = retryOptions.methods.includes(error.options.method);\n    const hasErrorCode = retryOptions.errorCodes.includes(error.code);\n    const hasStatusCode = error.response && retryOptions.statusCodes.includes(error.response.statusCode);\n    if (!hasMethod || (!hasErrorCode && !hasStatusCode)) {\n        return 0;\n    }\n    if (error.response) {\n        if (retryAfter) {\n            // In this case `computedValue` is `options.request.timeout`\n            if (retryAfter > computedValue) {\n                return 0;\n            }\n            return retryAfter;\n        }\n        if (error.response.statusCode === 413) {\n            return 0;\n        }\n    }\n    const noise = Math.random() * retryOptions.noise;\n    return Math.min(((2 ** (attemptCount - 1)) * 1000), retryOptions.backoffLimit) + noise;\n};\nexport default calculateRetryDelay;\n"],"mappings":"AAAA,MAAMA,mBAAmB,GAAGA,CAAC;EAAEC,YAAY;EAAEC,YAAY;EAAEC,KAAK;EAAEC,UAAU;EAAEC;AAAe,CAAC,KAAK;EAC/F,IAAIF,KAAK,CAACG,IAAI,KAAK,YAAY,EAAE;IAC7B,OAAO,CAAC;EACZ;EACA,IAAIL,YAAY,GAAGC,YAAY,CAACK,KAAK,EAAE;IACnC,OAAO,CAAC;EACZ;EACA,MAAMC,SAAS,GAAGN,YAAY,CAACO,OAAO,CAACC,QAAQ,CAACP,KAAK,CAACQ,OAAO,CAACC,MAAM,CAAC;EACrE,MAAMC,YAAY,GAAGX,YAAY,CAACY,UAAU,CAACJ,QAAQ,CAACP,KAAK,CAACY,IAAI,CAAC;EACjE,MAAMC,aAAa,GAAGb,KAAK,CAACc,QAAQ,IAAIf,YAAY,CAACgB,WAAW,CAACR,QAAQ,CAACP,KAAK,CAACc,QAAQ,CAACE,UAAU,CAAC;EACpG,IAAI,CAACX,SAAS,IAAK,CAACK,YAAY,IAAI,CAACG,aAAc,EAAE;IACjD,OAAO,CAAC;EACZ;EACA,IAAIb,KAAK,CAACc,QAAQ,EAAE;IAChB,IAAIb,UAAU,EAAE;MACZ;MACA,IAAIA,UAAU,GAAGC,aAAa,EAAE;QAC5B,OAAO,CAAC;MACZ;MACA,OAAOD,UAAU;IACrB;IACA,IAAID,KAAK,CAACc,QAAQ,CAACE,UAAU,KAAK,GAAG,EAAE;MACnC,OAAO,CAAC;IACZ;EACJ;EACA,MAAMC,KAAK,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGpB,YAAY,CAACkB,KAAK;EAChD,OAAOC,IAAI,CAACE,GAAG,CAAG,CAAC,KAAKtB,YAAY,GAAG,CAAC,CAAC,GAAI,IAAI,EAAGC,YAAY,CAACsB,YAAY,CAAC,GAAGJ,KAAK;AAC1F,CAAC;AACD,eAAepB,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}