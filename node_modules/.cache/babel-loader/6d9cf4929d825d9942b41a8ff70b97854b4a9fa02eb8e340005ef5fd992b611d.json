{"ast":null,"code":"var fs = require(\"fs\");\nvar url = require(\"url\");\nvar os = require(\"os\");\nvar resolvePath = require(\"path\").resolve;\nvar isAbsolutePath = require('path-is-absolute');\nvar promises = require(\"../promises\");\nexports.Files = Files;\nexports.uriToPath = uriToPath;\nfunction Files(base) {\n  function read(uri, encoding) {\n    return resolveUri(uri).then(function (path) {\n      return readFile(path, encoding).caught(function (error) {\n        var message = \"could not open external image: '\" + uri + \"' (document directory: '\" + base + \"')\\n\" + error.message;\n        return promises.reject(new Error(message));\n      });\n    });\n  }\n  function resolveUri(uri) {\n    var path = uriToPath(uri);\n    if (isAbsolutePath(path)) {\n      return promises.resolve(path);\n    } else if (base) {\n      return promises.resolve(resolvePath(base, path));\n    } else {\n      return promises.reject(new Error(\"could not find external image '\" + uri + \"', path of input document is unknown\"));\n    }\n  }\n  return {\n    read: read\n  };\n}\nvar readFile = promises.promisify(fs.readFile.bind(fs));\nfunction uriToPath(uriString, platform) {\n  if (!platform) {\n    platform = os.platform();\n  }\n  var uri = url.parse(uriString);\n  if (isLocalFileUri(uri) || isRelativeUri(uri)) {\n    var path = decodeURIComponent(uri.path);\n    if (platform === \"win32\" && /^\\/[a-z]:/i.test(path)) {\n      return path.slice(1);\n    } else {\n      return path;\n    }\n  } else {\n    throw new Error(\"Could not convert URI to path: \" + uriString);\n  }\n}\nfunction isLocalFileUri(uri) {\n  return uri.protocol === \"file:\" && (!uri.host || uri.host === \"localhost\");\n}\nfunction isRelativeUri(uri) {\n  return !uri.protocol && !uri.host;\n}","map":{"version":3,"names":["fs","require","url","os","resolvePath","resolve","isAbsolutePath","promises","exports","Files","uriToPath","base","read","uri","encoding","resolveUri","then","path","readFile","caught","error","message","reject","Error","promisify","bind","uriString","platform","parse","isLocalFileUri","isRelativeUri","decodeURIComponent","test","slice","protocol","host"],"sources":["D:/LangChainJS/chatpdf/node_modules/mammoth/lib/docx/files.js"],"sourcesContent":["var fs = require(\"fs\");\nvar url = require(\"url\");\nvar os = require(\"os\");\nvar resolvePath = require(\"path\").resolve;\nvar isAbsolutePath = require('path-is-absolute');\n\nvar promises = require(\"../promises\");\n\n\nexports.Files = Files;\nexports.uriToPath = uriToPath;\n\n\nfunction Files(base) {\n    function read(uri, encoding) {\n        return resolveUri(uri).then(function(path) {\n            return readFile(path, encoding).caught(function(error) {\n                var message = \"could not open external image: '\" + uri + \"' (document directory: '\" + base + \"')\\n\" + error.message;\n                return promises.reject(new Error(message));\n            });\n        });\n    }\n    \n    function resolveUri(uri) {\n        var path = uriToPath(uri);\n        if (isAbsolutePath(path)) {\n            return promises.resolve(path);\n        } else if (base) {\n            return promises.resolve(resolvePath(base, path));\n        } else {\n            return promises.reject(new Error(\"could not find external image '\" + uri + \"', path of input document is unknown\"));\n        }\n    }\n    \n    return {\n        read: read\n    };\n}\n\nvar readFile = promises.promisify(fs.readFile.bind(fs));\n\n\nfunction uriToPath(uriString, platform) {\n    if (!platform) {\n        platform = os.platform();\n    }\n    \n    var uri = url.parse(uriString);\n    if (isLocalFileUri(uri) || isRelativeUri(uri)) {\n        var path = decodeURIComponent(uri.path);\n        if (platform === \"win32\" && /^\\/[a-z]:/i.test(path)) {\n            return path.slice(1);\n        } else {\n            return path;\n        }\n    } else {\n        throw new Error(\"Could not convert URI to path: \" + uriString);\n    }\n}\n\nfunction isLocalFileUri(uri) {\n    return uri.protocol === \"file:\" && (!uri.host || uri.host === \"localhost\");\n}\n\nfunction isRelativeUri(uri) {\n    return !uri.protocol && !uri.host;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}