{"ast":null,"code":"export function stringToBytes(string) {\n  return [...string].map(character => character.charCodeAt(0)); // eslint-disable-line unicorn/prefer-code-point\n}\n\n/**\nChecks whether the TAR checksum is valid.\n\n@param {Buffer} buffer - The TAR header `[offset ... offset + 512]`.\n@param {number} offset - TAR header offset.\n@returns {boolean} `true` if the TAR checksum is valid, otherwise `false`.\n*/\nexport function tarHeaderChecksumMatches(buffer, offset = 0) {\n  const readSum = Number.parseInt(buffer.toString('utf8', 148, 154).replace(/\\0.*$/, '').trim(), 8); // Read sum in header\n  if (Number.isNaN(readSum)) {\n    return false;\n  }\n  let sum = 8 * 0x20; // Initialize signed bit sum\n\n  for (let index = offset; index < offset + 148; index++) {\n    sum += buffer[index];\n  }\n  for (let index = offset + 156; index < offset + 512; index++) {\n    sum += buffer[index];\n  }\n  return readSum === sum;\n}\n\n/**\nID3 UINT32 sync-safe tokenizer token.\n28 bits (representing up to 256MB) integer, the msb is 0 to avoid \"false syncsignals\".\n*/\nexport const uint32SyncSafeToken = {\n  get: (buffer, offset) => buffer[offset + 3] & 0x7F | buffer[offset + 2] << 7 | buffer[offset + 1] << 14 | buffer[offset] << 21,\n  len: 4\n};","map":{"version":3,"names":["stringToBytes","string","map","character","charCodeAt","tarHeaderChecksumMatches","buffer","offset","readSum","Number","parseInt","toString","replace","trim","isNaN","sum","index","uint32SyncSafeToken","get","len"],"sources":["D:/LangChainJS/chatpdf/node_modules/file-type/util.js"],"sourcesContent":["export function stringToBytes(string) {\n\treturn [...string].map(character => character.charCodeAt(0)); // eslint-disable-line unicorn/prefer-code-point\n}\n\n/**\nChecks whether the TAR checksum is valid.\n\n@param {Buffer} buffer - The TAR header `[offset ... offset + 512]`.\n@param {number} offset - TAR header offset.\n@returns {boolean} `true` if the TAR checksum is valid, otherwise `false`.\n*/\nexport function tarHeaderChecksumMatches(buffer, offset = 0) {\n\tconst readSum = Number.parseInt(buffer.toString('utf8', 148, 154).replace(/\\0.*$/, '').trim(), 8); // Read sum in header\n\tif (Number.isNaN(readSum)) {\n\t\treturn false;\n\t}\n\n\tlet sum = 8 * 0x20; // Initialize signed bit sum\n\n\tfor (let index = offset; index < offset + 148; index++) {\n\t\tsum += buffer[index];\n\t}\n\n\tfor (let index = offset + 156; index < offset + 512; index++) {\n\t\tsum += buffer[index];\n\t}\n\n\treturn readSum === sum;\n}\n\n/**\nID3 UINT32 sync-safe tokenizer token.\n28 bits (representing up to 256MB) integer, the msb is 0 to avoid \"false syncsignals\".\n*/\nexport const uint32SyncSafeToken = {\n\tget: (buffer, offset) => (buffer[offset + 3] & 0x7F) | ((buffer[offset + 2]) << 7) | ((buffer[offset + 1]) << 14) | ((buffer[offset]) << 21),\n\tlen: 4,\n};\n"],"mappings":"AAAA,OAAO,SAASA,aAAaA,CAACC,MAAM,EAAE;EACrC,OAAO,CAAC,GAAGA,MAAM,CAAC,CAACC,GAAG,CAACC,SAAS,IAAIA,SAAS,CAACC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,wBAAwBA,CAACC,MAAM,EAAEC,MAAM,GAAG,CAAC,EAAE;EAC5D,MAAMC,OAAO,GAAGC,MAAM,CAACC,QAAQ,CAACJ,MAAM,CAACK,QAAQ,CAAC,MAAM,EAAE,GAAG,EAAE,GAAG,CAAC,CAACC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACnG,IAAIJ,MAAM,CAACK,KAAK,CAACN,OAAO,CAAC,EAAE;IAC1B,OAAO,KAAK;EACb;EAEA,IAAIO,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC;;EAEpB,KAAK,IAAIC,KAAK,GAAGT,MAAM,EAAES,KAAK,GAAGT,MAAM,GAAG,GAAG,EAAES,KAAK,EAAE,EAAE;IACvDD,GAAG,IAAIT,MAAM,CAACU,KAAK,CAAC;EACrB;EAEA,KAAK,IAAIA,KAAK,GAAGT,MAAM,GAAG,GAAG,EAAES,KAAK,GAAGT,MAAM,GAAG,GAAG,EAAES,KAAK,EAAE,EAAE;IAC7DD,GAAG,IAAIT,MAAM,CAACU,KAAK,CAAC;EACrB;EAEA,OAAOR,OAAO,KAAKO,GAAG;AACvB;;AAEA;AACA;AACA;AACA;AACA,OAAO,MAAME,mBAAmB,GAAG;EAClCC,GAAG,EAAEA,CAACZ,MAAM,EAAEC,MAAM,KAAMD,MAAM,CAACC,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,GAAMD,MAAM,CAACC,MAAM,GAAG,CAAC,CAAC,IAAK,CAAE,GAAKD,MAAM,CAACC,MAAM,GAAG,CAAC,CAAC,IAAK,EAAG,GAAKD,MAAM,CAACC,MAAM,CAAC,IAAK,EAAG;EAC5IY,GAAG,EAAE;AACN,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}