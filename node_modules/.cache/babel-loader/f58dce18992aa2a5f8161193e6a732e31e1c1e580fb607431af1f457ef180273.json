{"ast":null,"code":"/**\n * Converts a pdf file at a given path to a tiff file with\n * the GraphicsMagick command \"convert\"\n */\nvar temp = require('temp');\nvar path = require('path');\nvar exec = require('child_process').exec;\nvar spawn = require('child_process').spawn;\nvar fs = require('fs');\nvar pdf_convert_quality = 400; // default to density 400 for the convert command\n\n/**\n * @param input_path the path to a pdf file on disk. Since GhostScript requires random file access, we need a path\n *   to an actual file rather than accepting a stream\n * @param {String} quality is an optional flag that controls the quality of the pdf to tiff conversion.\n * @return {String} output_path the path to the converted tif file\n * @return callback(<maybe error>, output_path)\n */\nexports = module.exports = function convert(input_path, quality, callback) {\n  // options is an optional parameter\n  if (!callback || typeof callback != \"function\") {\n    callback = quality; // callback must be the second parameter\n    quality = undefined; // no option passed\n  }\n  fs.exists(input_path, function (exists) {\n    if (!exists) {\n      return callback('error, no file exists at the path you specified: ' + input_path);\n    }\n    // get a temp output path\n\n    var output_path = temp.path({\n      prefix: 'tif_output',\n      suffix: '.tif'\n    });\n    // var output_path = path.join(__dirname,'test/test_data/single_page_raw.tif');\n    var params = [\n    // '-depth 8',\n    // '-background white',\n    // '-flatten +matte',\n    // '-density '+pdf_convert_quality,\n    input_path, output_path];\n    if (quality) {\n      if (typeof quality !== 'string' && typeof quality !== 'number') {\n        return callback('error, pdf quality option must be a string, you passed a ' + typeof quality);\n      }\n      pdf_convert_quality = quality;\n    }\n    var cmd = 'gs -sDEVICE=tiffgray -r720x720 -g6120x7920 -sCompression=lzw -o \"' + output_path + '\" \"' + input_path + '\"';\n    // var cmd = 'convert -depth 8 -background white -flatten +matte -density '+pdf_convert_quality+' \"'+ input_path +'\"  \"' + output_path+'\"';\n    var child = exec(cmd, function (err, stderr, stdout) {\n      if (err) {\n        return callback(err);\n      }\n      return callback(null, output_path);\n    });\n  });\n};","map":{"version":3,"names":["temp","require","path","exec","spawn","fs","pdf_convert_quality","exports","module","convert","input_path","quality","callback","undefined","exists","output_path","prefix","suffix","params","cmd","child","err","stderr","stdout"],"sources":["D:/LangChainJS/chatpdf/node_modules/pdf-extract/lib/convert.js"],"sourcesContent":["/**\n * Converts a pdf file at a given path to a tiff file with\n * the GraphicsMagick command \"convert\"\n */\nvar temp = require('temp');\nvar path = require('path');\nvar exec = require('child_process').exec\nvar spawn = require('child_process').spawn;\nvar fs = require('fs');\nvar pdf_convert_quality = 400; // default to density 400 for the convert command\n\n\n/**\n * @param input_path the path to a pdf file on disk. Since GhostScript requires random file access, we need a path\n *   to an actual file rather than accepting a stream\n * @param {String} quality is an optional flag that controls the quality of the pdf to tiff conversion.\n * @return {String} output_path the path to the converted tif file\n * @return callback(<maybe error>, output_path)\n */\nexports = module.exports = function convert(input_path, quality, callback) {\n  // options is an optional parameter\n  if (!callback || typeof callback != \"function\") {\n    callback = quality;   // callback must be the second parameter\n    quality = undefined;  // no option passed\n  }\n\n  fs.exists(input_path, function (exists) {\n    if (!exists) { return callback('error, no file exists at the path you specified: ' + input_path); }\n    // get a temp output path\n\n    var output_path = temp.path({prefix: 'tif_output', suffix:'.tif'});\n    // var output_path = path.join(__dirname,'test/test_data/single_page_raw.tif');\n    var params = [\n\n      // '-depth 8',\n      // '-background white',\n      // '-flatten +matte',\n      // '-density '+pdf_convert_quality,\n      input_path,\n      output_path\n    ];\n    if (quality) {\n      if (typeof(quality) !== 'string' && typeof(quality) !== 'number') {\n        return callback('error, pdf quality option must be a string, you passed a ' + typeof(quality));\n      }\n      pdf_convert_quality = quality;\n    }\n    var cmd = 'gs -sDEVICE=tiffgray -r720x720 -g6120x7920 -sCompression=lzw -o \"' + output_path + '\" \"'+input_path+'\"';\n    // var cmd = 'convert -depth 8 -background white -flatten +matte -density '+pdf_convert_quality+' \"'+ input_path +'\"  \"' + output_path+'\"';\n    var child = exec(cmd, function (err, stderr, stdout) {\n      if (err) {\n        return callback(err);\n      }\n      return callback(null, output_path);\n    });\n  });\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC1B,IAAIC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC1B,IAAIE,IAAI,GAAGF,OAAO,CAAC,eAAe,CAAC,CAACE,IAAI;AACxC,IAAIC,KAAK,GAAGH,OAAO,CAAC,eAAe,CAAC,CAACG,KAAK;AAC1C,IAAIC,EAAE,GAAGJ,OAAO,CAAC,IAAI,CAAC;AACtB,IAAIK,mBAAmB,GAAG,GAAG,CAAC,CAAC;;AAG/B;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,OAAO,GAAGC,MAAM,CAACD,OAAO,GAAG,SAASE,OAAOA,CAACC,UAAU,EAAEC,OAAO,EAAEC,QAAQ,EAAE;EACzE;EACA,IAAI,CAACA,QAAQ,IAAI,OAAOA,QAAQ,IAAI,UAAU,EAAE;IAC9CA,QAAQ,GAAGD,OAAO,CAAC,CAAG;IACtBA,OAAO,GAAGE,SAAS,CAAC,CAAE;EACxB;EAEAR,EAAE,CAACS,MAAM,CAACJ,UAAU,EAAE,UAAUI,MAAM,EAAE;IACtC,IAAI,CAACA,MAAM,EAAE;MAAE,OAAOF,QAAQ,CAAC,mDAAmD,GAAGF,UAAU,CAAC;IAAE;IAClG;;IAEA,IAAIK,WAAW,GAAGf,IAAI,CAACE,IAAI,CAAC;MAACc,MAAM,EAAE,YAAY;MAAEC,MAAM,EAAC;IAAM,CAAC,CAAC;IAClE;IACA,IAAIC,MAAM,GAAG;IAEX;IACA;IACA;IACA;IACAR,UAAU,EACVK,WAAW,CACZ;IACD,IAAIJ,OAAO,EAAE;MACX,IAAI,OAAOA,OAAQ,KAAK,QAAQ,IAAI,OAAOA,OAAQ,KAAK,QAAQ,EAAE;QAChE,OAAOC,QAAQ,CAAC,2DAA2D,GAAG,OAAOD,OAAQ,CAAC;MAChG;MACAL,mBAAmB,GAAGK,OAAO;IAC/B;IACA,IAAIQ,GAAG,GAAG,mEAAmE,GAAGJ,WAAW,GAAG,KAAK,GAACL,UAAU,GAAC,GAAG;IAClH;IACA,IAAIU,KAAK,GAAGjB,IAAI,CAACgB,GAAG,EAAE,UAAUE,GAAG,EAAEC,MAAM,EAAEC,MAAM,EAAE;MACnD,IAAIF,GAAG,EAAE;QACP,OAAOT,QAAQ,CAACS,GAAG,CAAC;MACtB;MACA,OAAOT,QAAQ,CAAC,IAAI,EAAEG,WAAW,CAAC;IACpC,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}