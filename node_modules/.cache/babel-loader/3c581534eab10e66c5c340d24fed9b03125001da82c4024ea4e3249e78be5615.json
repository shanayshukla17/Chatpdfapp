{"ast":null,"code":"'use strict';\n\nconst {\n  Agent\n} = require('../agent.js');\nconst JSStreamSocket = require('../utils/js-stream-socket.js');\nconst UnexpectedStatusCodeError = require('./unexpected-status-code-error.js');\nconst initialize = require('./initialize.js');\nclass Http2OverHttpX extends Agent {\n  constructor(options) {\n    super(options);\n    initialize(this, options.proxyOptions);\n  }\n  async createConnection(origin, options) {\n    const authority = `${origin.hostname}:${origin.port || 443}`;\n    const [stream, statusCode, statusMessage] = await this._getProxyStream(authority);\n    if (statusCode !== 200) {\n      throw new UnexpectedStatusCodeError(statusCode, statusMessage);\n    }\n    if (this.proxyOptions.raw) {\n      options.socket = stream;\n    } else {\n      const socket = new JSStreamSocket(stream);\n      socket.encrypted = false;\n      socket._handle.getpeername = out => {\n        out.family = undefined;\n        out.address = undefined;\n        out.port = undefined;\n      };\n      return socket;\n    }\n    return super.createConnection(origin, options);\n  }\n}\nmodule.exports = Http2OverHttpX;","map":{"version":3,"names":["Agent","require","JSStreamSocket","UnexpectedStatusCodeError","initialize","Http2OverHttpX","constructor","options","proxyOptions","createConnection","origin","authority","hostname","port","stream","statusCode","statusMessage","_getProxyStream","raw","socket","encrypted","_handle","getpeername","out","family","undefined","address","module","exports"],"sources":["D:/LangChainJS/chatpdf/node_modules/http2-wrapper/source/proxies/h2-over-hx.js"],"sourcesContent":["'use strict';\nconst {Agent} = require('../agent.js');\nconst JSStreamSocket = require('../utils/js-stream-socket.js');\nconst UnexpectedStatusCodeError = require('./unexpected-status-code-error.js');\nconst initialize = require('./initialize.js');\n\nclass Http2OverHttpX extends Agent {\n\tconstructor(options) {\n\t\tsuper(options);\n\n\t\tinitialize(this, options.proxyOptions);\n\t}\n\n\tasync createConnection(origin, options) {\n\t\tconst authority = `${origin.hostname}:${origin.port || 443}`;\n\n\t\tconst [stream, statusCode, statusMessage] = await this._getProxyStream(authority);\n\t\tif (statusCode !== 200) {\n\t\t\tthrow new UnexpectedStatusCodeError(statusCode, statusMessage);\n\t\t}\n\n\t\tif (this.proxyOptions.raw) {\n\t\t\toptions.socket = stream;\n\t\t} else {\n\t\t\tconst socket = new JSStreamSocket(stream);\n\t\t\tsocket.encrypted = false;\n\t\t\tsocket._handle.getpeername = out => {\n\t\t\t\tout.family = undefined;\n\t\t\t\tout.address = undefined;\n\t\t\t\tout.port = undefined;\n\t\t\t};\n\n\t\t\treturn socket;\n\t\t}\n\n\t\treturn super.createConnection(origin, options);\n\t}\n}\n\nmodule.exports = Http2OverHttpX;\n"],"mappings":"AAAA,YAAY;;AACZ,MAAM;EAACA;AAAK,CAAC,GAAGC,OAAO,CAAC,aAAa,CAAC;AACtC,MAAMC,cAAc,GAAGD,OAAO,CAAC,8BAA8B,CAAC;AAC9D,MAAME,yBAAyB,GAAGF,OAAO,CAAC,mCAAmC,CAAC;AAC9E,MAAMG,UAAU,GAAGH,OAAO,CAAC,iBAAiB,CAAC;AAE7C,MAAMI,cAAc,SAASL,KAAK,CAAC;EAClCM,WAAWA,CAACC,OAAO,EAAE;IACpB,KAAK,CAACA,OAAO,CAAC;IAEdH,UAAU,CAAC,IAAI,EAAEG,OAAO,CAACC,YAAY,CAAC;EACvC;EAEA,MAAMC,gBAAgBA,CAACC,MAAM,EAAEH,OAAO,EAAE;IACvC,MAAMI,SAAS,GAAG,GAAGD,MAAM,CAACE,QAAQ,IAAIF,MAAM,CAACG,IAAI,IAAI,GAAG,EAAE;IAE5D,MAAM,CAACC,MAAM,EAAEC,UAAU,EAAEC,aAAa,CAAC,GAAG,MAAM,IAAI,CAACC,eAAe,CAACN,SAAS,CAAC;IACjF,IAAII,UAAU,KAAK,GAAG,EAAE;MACvB,MAAM,IAAIZ,yBAAyB,CAACY,UAAU,EAAEC,aAAa,CAAC;IAC/D;IAEA,IAAI,IAAI,CAACR,YAAY,CAACU,GAAG,EAAE;MAC1BX,OAAO,CAACY,MAAM,GAAGL,MAAM;IACxB,CAAC,MAAM;MACN,MAAMK,MAAM,GAAG,IAAIjB,cAAc,CAACY,MAAM,CAAC;MACzCK,MAAM,CAACC,SAAS,GAAG,KAAK;MACxBD,MAAM,CAACE,OAAO,CAACC,WAAW,GAAGC,GAAG,IAAI;QACnCA,GAAG,CAACC,MAAM,GAAGC,SAAS;QACtBF,GAAG,CAACG,OAAO,GAAGD,SAAS;QACvBF,GAAG,CAACV,IAAI,GAAGY,SAAS;MACrB,CAAC;MAED,OAAON,MAAM;IACd;IAEA,OAAO,KAAK,CAACV,gBAAgB,CAACC,MAAM,EAAEH,OAAO,CAAC;EAC/C;AACD;AAEAoB,MAAM,CAACC,OAAO,GAAGvB,cAAc","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}