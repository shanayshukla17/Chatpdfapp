{"ast":null,"code":"var _jsxFileName = \"D:\\\\LangChainJS\\\\chatpdf\\\\src\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Zoom from 'react-reveal/Zoom';\nimport './Chat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chat({\n  pdfText,\n  chatHistory,\n  setChatHistory,\n  initialResponse\n}) {\n  _s();\n  const [inputValue, setInputValue] = useState('');\n  // const [chatHistory, setChatHistory] = useState([]);\n\n  const handleInputChange = event => {\n    setInputValue(event.target.value);\n  };\n  const parseResponseText = text => {\n    return text.split('\\n').map((line, index) => {\n      if (line.startsWith('**')) {\n        return /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: line.substring(2).trim()\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 24\n        }, this); // Heading\n      } else if (line.startsWith('*')) {\n        return /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: line.substring(1).trim()\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 24\n        }, this); // Subheading\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: line.trim()\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 24\n        }, this); // Normal text\n      }\n    });\n  };\n  const handleClick = async () => {\n    console.log(\"Input value: \", inputValue);\n    const msg = inputValue;\n    const options = {\n      method: 'POST',\n      body: JSON.stringify({\n        history: chatHistory,\n        message: msg\n        // instruction: pdfText\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    try {\n      const response = await fetch('http://localhost:8000/gemini', options);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.text();\n      console.log(data);\n      setChatHistory(prevChatHistory => [...prevChatHistory, {\n        role: \"user\",\n        parts: [{\n          text: inputValue\n        }]\n      }, {\n        role: \"model\",\n        parts: [{\n          text: data\n        }]\n      }]);\n    } catch (error) {\n      console.error('There has been a problem with your fetch operation:', error);\n    }\n    setInputValue(\"\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main_chat\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-show\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-message model\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: parseResponseText(initialResponse)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 17\n        }, this), chatHistory.map((entry, index) => /*#__PURE__*/_jsxDEV(Zoom, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `chat-message ${entry.role}`,\n            children: entry.parts.map((part, partIndex) => /*#__PURE__*/_jsxDEV(\"span\", {\n              children: parseResponseText(part.text)\n            }, partIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 29\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input_div\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"input_field\",\n          value: inputValue,\n          placeholder: \"Hey tell me something about the PDF\",\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"arrow\",\n          onClick: handleClick,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"/send.png\",\n            alt: \"Here\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-response\",\n      children: parseResponseText(pdfText)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n}\n_s(Chat, \"SORcW8kVWUa8fZ+un8oXhp/OLnk=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","Zoom","jsxDEV","_jsxDEV","Chat","pdfText","chatHistory","setChatHistory","initialResponse","_s","inputValue","setInputValue","handleInputChange","event","target","value","parseResponseText","text","split","map","line","index","startsWith","children","substring","trim","fileName","_jsxFileName","lineNumber","columnNumber","handleClick","console","log","msg","options","method","body","JSON","stringify","history","message","headers","response","fetch","ok","Error","data","prevChatHistory","role","parts","error","className","entry","part","partIndex","placeholder","onChange","onClick","src","alt","_c","$RefreshReg$"],"sources":["D:/LangChainJS/chatpdf/src/Chat.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Zoom from 'react-reveal/Zoom';\r\nimport './Chat.css';\r\n\r\nfunction Chat({ pdfText, chatHistory ,setChatHistory,initialResponse}) {\r\n    const [inputValue, setInputValue] = useState('');\r\n    // const [chatHistory, setChatHistory] = useState([]);\r\n\r\n    const handleInputChange = (event) => {\r\n        setInputValue(event.target.value);\r\n    };\r\n\r\n    const parseResponseText = (text) => {\r\n        return text.split('\\n').map((line, index) => {\r\n            if (line.startsWith('**')) {\r\n                return <h2 key={index}>{line.substring(2).trim()}</h2>; // Heading\r\n            } else if (line.startsWith('*')) {\r\n                return <h3 key={index}>{line.substring(1).trim()}</h3>; // Subheading\r\n            } else {\r\n                return <p key={index}>{line.trim()}</p>; // Normal text\r\n            }\r\n        });\r\n    };\r\n\r\n    const handleClick = async () => {\r\n        console.log(\"Input value: \", inputValue);\r\n        const msg = inputValue;\r\n        const options = {\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n                history: chatHistory,\r\n                message: msg,\r\n               // instruction: pdfText\r\n            }),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        };\r\n\r\n        try {\r\n            const response = await fetch('http://localhost:8000/gemini', options);\r\n            if (!response.ok) {\r\n                throw new Error('Network response was not ok');\r\n            }\r\n            const data = await response.text();\r\n            console.log(data);\r\n            setChatHistory(prevChatHistory => [...prevChatHistory, { role: \"user\", parts: [{ text: inputValue }] }, { role: \"model\", parts: [{ text: data }] }]);\r\n        } catch (error) {\r\n            console.error('There has been a problem with your fetch operation:', error);\r\n        }\r\n\r\n        setInputValue(\"\");\r\n    };\r\n\r\n    return (\r\n        <div className=\"main_chat\">\r\n            <div className=\"chat-box\">\r\n                <div className=\"chat-show\">\r\n                <div className='chat-message model'>\r\n                    <span>{parseResponseText(initialResponse)}</span>\r\n                </div>\r\n                    {chatHistory.map((entry, index) => (\r\n                        <Zoom key={index}>\r\n                            <div className={`chat-message ${entry.role}`}>\r\n                                {entry.parts.map((part, partIndex) => (\r\n                                    <span key={partIndex}>{parseResponseText(part.text)}</span>\r\n                                ))}\r\n                            </div>\r\n                        </Zoom>\r\n                    ))}\r\n                </div>\r\n                <div className=\"input_div\">\r\n                    <input\r\n                        className=\"input_field\"\r\n                        value={inputValue}\r\n                        placeholder='Hey tell me something about the PDF'\r\n                        onChange={handleInputChange}\r\n                    />\r\n                    <button className=\"arrow\" onClick={handleClick}>\r\n                        <img src=\"/send.png\" alt='Here' />\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            {/* Display response text with proper headings */}\r\n            <div className=\"chat-response\">\r\n                {parseResponseText(pdfText)}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}