{"ast":null,"code":"import { RequestError } from './errors.js';\nexport const isResponseOk = response => {\n  const {\n    statusCode\n  } = response;\n  const limitStatusCode = response.request.options.followRedirect ? 299 : 399;\n  return statusCode >= 200 && statusCode <= limitStatusCode || statusCode === 304;\n};\n/**\nAn error to be thrown when server response code is 2xx, and parsing body fails.\nIncludes a `response` property.\n*/\nexport class ParseError extends RequestError {\n  constructor(error, response) {\n    const {\n      options\n    } = response.request;\n    super(`${error.message} in \"${options.url.toString()}\"`, error, response.request);\n    this.name = 'ParseError';\n    this.code = 'ERR_BODY_PARSE_FAILURE';\n  }\n}\nexport const parseBody = (response, responseType, parseJson, encoding) => {\n  const {\n    rawBody\n  } = response;\n  try {\n    if (responseType === 'text') {\n      return rawBody.toString(encoding);\n    }\n    if (responseType === 'json') {\n      return rawBody.length === 0 ? '' : parseJson(rawBody.toString(encoding));\n    }\n    if (responseType === 'buffer') {\n      return rawBody;\n    }\n  } catch (error) {\n    throw new ParseError(error, response);\n  }\n  throw new ParseError({\n    message: `Unknown body type '${responseType}'`,\n    name: 'Error'\n  }, response);\n};","map":{"version":3,"names":["RequestError","isResponseOk","response","statusCode","limitStatusCode","request","options","followRedirect","ParseError","constructor","error","message","url","toString","name","code","parseBody","responseType","parseJson","encoding","rawBody","length"],"sources":["D:/LangChainJS/chatpdf/node_modules/got/dist/source/core/response.js"],"sourcesContent":["import { RequestError } from './errors.js';\nexport const isResponseOk = (response) => {\n    const { statusCode } = response;\n    const limitStatusCode = response.request.options.followRedirect ? 299 : 399;\n    return (statusCode >= 200 && statusCode <= limitStatusCode) || statusCode === 304;\n};\n/**\nAn error to be thrown when server response code is 2xx, and parsing body fails.\nIncludes a `response` property.\n*/\nexport class ParseError extends RequestError {\n    constructor(error, response) {\n        const { options } = response.request;\n        super(`${error.message} in \"${options.url.toString()}\"`, error, response.request);\n        this.name = 'ParseError';\n        this.code = 'ERR_BODY_PARSE_FAILURE';\n    }\n}\nexport const parseBody = (response, responseType, parseJson, encoding) => {\n    const { rawBody } = response;\n    try {\n        if (responseType === 'text') {\n            return rawBody.toString(encoding);\n        }\n        if (responseType === 'json') {\n            return rawBody.length === 0 ? '' : parseJson(rawBody.toString(encoding));\n        }\n        if (responseType === 'buffer') {\n            return rawBody;\n        }\n    }\n    catch (error) {\n        throw new ParseError(error, response);\n    }\n    throw new ParseError({\n        message: `Unknown body type '${responseType}'`,\n        name: 'Error',\n    }, response);\n};\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,aAAa;AAC1C,OAAO,MAAMC,YAAY,GAAIC,QAAQ,IAAK;EACtC,MAAM;IAAEC;EAAW,CAAC,GAAGD,QAAQ;EAC/B,MAAME,eAAe,GAAGF,QAAQ,CAACG,OAAO,CAACC,OAAO,CAACC,cAAc,GAAG,GAAG,GAAG,GAAG;EAC3E,OAAQJ,UAAU,IAAI,GAAG,IAAIA,UAAU,IAAIC,eAAe,IAAKD,UAAU,KAAK,GAAG;AACrF,CAAC;AACD;AACA;AACA;AACA;AACA,OAAO,MAAMK,UAAU,SAASR,YAAY,CAAC;EACzCS,WAAWA,CAACC,KAAK,EAAER,QAAQ,EAAE;IACzB,MAAM;MAAEI;IAAQ,CAAC,GAAGJ,QAAQ,CAACG,OAAO;IACpC,KAAK,CAAC,GAAGK,KAAK,CAACC,OAAO,QAAQL,OAAO,CAACM,GAAG,CAACC,QAAQ,CAAC,CAAC,GAAG,EAAEH,KAAK,EAAER,QAAQ,CAACG,OAAO,CAAC;IACjF,IAAI,CAACS,IAAI,GAAG,YAAY;IACxB,IAAI,CAACC,IAAI,GAAG,wBAAwB;EACxC;AACJ;AACA,OAAO,MAAMC,SAAS,GAAGA,CAACd,QAAQ,EAAEe,YAAY,EAAEC,SAAS,EAAEC,QAAQ,KAAK;EACtE,MAAM;IAAEC;EAAQ,CAAC,GAAGlB,QAAQ;EAC5B,IAAI;IACA,IAAIe,YAAY,KAAK,MAAM,EAAE;MACzB,OAAOG,OAAO,CAACP,QAAQ,CAACM,QAAQ,CAAC;IACrC;IACA,IAAIF,YAAY,KAAK,MAAM,EAAE;MACzB,OAAOG,OAAO,CAACC,MAAM,KAAK,CAAC,GAAG,EAAE,GAAGH,SAAS,CAACE,OAAO,CAACP,QAAQ,CAACM,QAAQ,CAAC,CAAC;IAC5E;IACA,IAAIF,YAAY,KAAK,QAAQ,EAAE;MAC3B,OAAOG,OAAO;IAClB;EACJ,CAAC,CACD,OAAOV,KAAK,EAAE;IACV,MAAM,IAAIF,UAAU,CAACE,KAAK,EAAER,QAAQ,CAAC;EACzC;EACA,MAAM,IAAIM,UAAU,CAAC;IACjBG,OAAO,EAAE,sBAAsBM,YAAY,GAAG;IAC9CH,IAAI,EAAE;EACV,CAAC,EAAEZ,QAAQ,CAAC;AAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}