{"ast":null,"code":"import { EndOfStreamError } from 'peek-readable';\nimport { Buffer } from 'node:buffer';\n/**\n * Core tokenizer\n */\nexport class AbstractTokenizer {\n  constructor(fileInfo) {\n    /**\n     * Tokenizer-stream position\n     */\n    this.position = 0;\n    this.numBuffer = new Uint8Array(8);\n    this.fileInfo = fileInfo ? fileInfo : {};\n  }\n  /**\n   * Read a token from the tokenizer-stream\n   * @param token - The token to read\n   * @param position - If provided, the desired position in the tokenizer-stream\n   * @returns Promise with token data\n   */\n  async readToken(token, position = this.position) {\n    const uint8Array = Buffer.alloc(token.len);\n    const len = await this.readBuffer(uint8Array, {\n      position\n    });\n    if (len < token.len) throw new EndOfStreamError();\n    return token.get(uint8Array, 0);\n  }\n  /**\n   * Peek a token from the tokenizer-stream.\n   * @param token - Token to peek from the tokenizer-stream.\n   * @param position - Offset where to begin reading within the file. If position is null, data will be read from the current file position.\n   * @returns Promise with token data\n   */\n  async peekToken(token, position = this.position) {\n    const uint8Array = Buffer.alloc(token.len);\n    const len = await this.peekBuffer(uint8Array, {\n      position\n    });\n    if (len < token.len) throw new EndOfStreamError();\n    return token.get(uint8Array, 0);\n  }\n  /**\n   * Read a numeric token from the stream\n   * @param token - Numeric token\n   * @returns Promise with number\n   */\n  async readNumber(token) {\n    const len = await this.readBuffer(this.numBuffer, {\n      length: token.len\n    });\n    if (len < token.len) throw new EndOfStreamError();\n    return token.get(this.numBuffer, 0);\n  }\n  /**\n   * Read a numeric token from the stream\n   * @param token - Numeric token\n   * @returns Promise with number\n   */\n  async peekNumber(token) {\n    const len = await this.peekBuffer(this.numBuffer, {\n      length: token.len\n    });\n    if (len < token.len) throw new EndOfStreamError();\n    return token.get(this.numBuffer, 0);\n  }\n  /**\n   * Ignore number of bytes, advances the pointer in under tokenizer-stream.\n   * @param length - Number of bytes to ignore\n   * @return resolves the number of bytes ignored, equals length if this available, otherwise the number of bytes available\n   */\n  async ignore(length) {\n    if (this.fileInfo.size !== undefined) {\n      const bytesLeft = this.fileInfo.size - this.position;\n      if (length > bytesLeft) {\n        this.position += bytesLeft;\n        return bytesLeft;\n      }\n    }\n    this.position += length;\n    return length;\n  }\n  async close() {\n    // empty\n  }\n  normalizeOptions(uint8Array, options) {\n    if (options && options.position !== undefined && options.position < this.position) {\n      throw new Error('`options.position` must be equal or greater than `tokenizer.position`');\n    }\n    if (options) {\n      return {\n        mayBeLess: options.mayBeLess === true,\n        offset: options.offset ? options.offset : 0,\n        length: options.length ? options.length : uint8Array.length - (options.offset ? options.offset : 0),\n        position: options.position ? options.position : this.position\n      };\n    }\n    return {\n      mayBeLess: false,\n      offset: 0,\n      length: uint8Array.length,\n      position: this.position\n    };\n  }\n}","map":{"version":3,"names":["EndOfStreamError","Buffer","AbstractTokenizer","constructor","fileInfo","position","numBuffer","Uint8Array","readToken","token","uint8Array","alloc","len","readBuffer","get","peekToken","peekBuffer","readNumber","length","peekNumber","ignore","size","undefined","bytesLeft","close","normalizeOptions","options","Error","mayBeLess","offset"],"sources":["D:/LangChainJS/chatpdf/node_modules/strtok3/lib/AbstractTokenizer.js"],"sourcesContent":["import { EndOfStreamError } from 'peek-readable';\nimport { Buffer } from 'node:buffer';\n/**\n * Core tokenizer\n */\nexport class AbstractTokenizer {\n    constructor(fileInfo) {\n        /**\n         * Tokenizer-stream position\n         */\n        this.position = 0;\n        this.numBuffer = new Uint8Array(8);\n        this.fileInfo = fileInfo ? fileInfo : {};\n    }\n    /**\n     * Read a token from the tokenizer-stream\n     * @param token - The token to read\n     * @param position - If provided, the desired position in the tokenizer-stream\n     * @returns Promise with token data\n     */\n    async readToken(token, position = this.position) {\n        const uint8Array = Buffer.alloc(token.len);\n        const len = await this.readBuffer(uint8Array, { position });\n        if (len < token.len)\n            throw new EndOfStreamError();\n        return token.get(uint8Array, 0);\n    }\n    /**\n     * Peek a token from the tokenizer-stream.\n     * @param token - Token to peek from the tokenizer-stream.\n     * @param position - Offset where to begin reading within the file. If position is null, data will be read from the current file position.\n     * @returns Promise with token data\n     */\n    async peekToken(token, position = this.position) {\n        const uint8Array = Buffer.alloc(token.len);\n        const len = await this.peekBuffer(uint8Array, { position });\n        if (len < token.len)\n            throw new EndOfStreamError();\n        return token.get(uint8Array, 0);\n    }\n    /**\n     * Read a numeric token from the stream\n     * @param token - Numeric token\n     * @returns Promise with number\n     */\n    async readNumber(token) {\n        const len = await this.readBuffer(this.numBuffer, { length: token.len });\n        if (len < token.len)\n            throw new EndOfStreamError();\n        return token.get(this.numBuffer, 0);\n    }\n    /**\n     * Read a numeric token from the stream\n     * @param token - Numeric token\n     * @returns Promise with number\n     */\n    async peekNumber(token) {\n        const len = await this.peekBuffer(this.numBuffer, { length: token.len });\n        if (len < token.len)\n            throw new EndOfStreamError();\n        return token.get(this.numBuffer, 0);\n    }\n    /**\n     * Ignore number of bytes, advances the pointer in under tokenizer-stream.\n     * @param length - Number of bytes to ignore\n     * @return resolves the number of bytes ignored, equals length if this available, otherwise the number of bytes available\n     */\n    async ignore(length) {\n        if (this.fileInfo.size !== undefined) {\n            const bytesLeft = this.fileInfo.size - this.position;\n            if (length > bytesLeft) {\n                this.position += bytesLeft;\n                return bytesLeft;\n            }\n        }\n        this.position += length;\n        return length;\n    }\n    async close() {\n        // empty\n    }\n    normalizeOptions(uint8Array, options) {\n        if (options && options.position !== undefined && options.position < this.position) {\n            throw new Error('`options.position` must be equal or greater than `tokenizer.position`');\n        }\n        if (options) {\n            return {\n                mayBeLess: options.mayBeLess === true,\n                offset: options.offset ? options.offset : 0,\n                length: options.length ? options.length : (uint8Array.length - (options.offset ? options.offset : 0)),\n                position: options.position ? options.position : this.position\n            };\n        }\n        return {\n            mayBeLess: false,\n            offset: 0,\n            length: uint8Array.length,\n            position: this.position\n        };\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}