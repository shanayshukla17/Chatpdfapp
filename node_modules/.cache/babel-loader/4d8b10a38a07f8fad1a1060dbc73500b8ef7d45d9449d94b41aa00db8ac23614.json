{"ast":null,"code":"// source/parsers/pdf.ts\n// The text extracter for PDF files.\n// @ts-expect-error There are no types for this package.\nimport parsePdf from 'pdf-parse/lib/pdf-parse.js';\nexport class PdfExtractor {\n  constructor() {\n    /**\n     * The type(s) of input acceptable to this method.\n     */\n    this.mimes = ['application/pdf'];\n    /**\n     * Extract text from a PDF file if possible.\n     *\n     * @param payload The input and its type.\n     * @returns The text extracted from the input.\n     */\n    this.apply = async input => {\n      // Convert the PDF to text and return the text.\n      const parsedPdf = await parsePdf(input, {\n        pagerender: renderPage\n      });\n      return parsedPdf.text;\n    };\n  }\n}\n/**\n * We have to redefine this function to ensure that there are spaces between\n * words in the output text.\n *\n * @param data The data stored in the PDF about the page.\n * @returns The text content on the page\n */\nconst renderPage = async data => {\n  const options = {\n    normalizeWhitespace: false,\n    disableCombineTextItems: false\n  };\n  // @ts-expect-error todo: figure out the types\n  return data.getTextContent(options).then(textContent => {\n    let lastY = '';\n    let text = '';\n    // @ts-expect-error todo: figure out the types\n    for (const item of textContent.items) {\n      if (!(lastY === item.transform[5] || !lastY)) text += '\\n';\n      // The word + a space\n      text += item.str + ' ';\n      lastY = item.transform[5];\n    }\n    return text;\n  });\n};","map":{"version":3,"names":["parsePdf","PdfExtractor","constructor","mimes","apply","input","parsedPdf","pagerender","renderPage","text","data","options","normalizeWhitespace","disableCombineTextItems","getTextContent","then","textContent","lastY","item","items","transform","str"],"sources":["D:/LangChainJS/chatpdf/node_modules/office-text-extractor/build/parsers/pdf.js"],"sourcesContent":["// source/parsers/pdf.ts\n// The text extracter for PDF files.\n// @ts-expect-error There are no types for this package.\nimport parsePdf from 'pdf-parse/lib/pdf-parse.js';\nexport class PdfExtractor {\n    constructor() {\n        /**\n         * The type(s) of input acceptable to this method.\n         */\n        this.mimes = ['application/pdf'];\n        /**\n         * Extract text from a PDF file if possible.\n         *\n         * @param payload The input and its type.\n         * @returns The text extracted from the input.\n         */\n        this.apply = async (input) => {\n            // Convert the PDF to text and return the text.\n            const parsedPdf = (await parsePdf(input, {\n                pagerender: renderPage,\n            }));\n            return parsedPdf.text;\n        };\n    }\n}\n/**\n * We have to redefine this function to ensure that there are spaces between\n * words in the output text.\n *\n * @param data The data stored in the PDF about the page.\n * @returns The text content on the page\n */\nconst renderPage = async (data) => {\n    const options = {\n        normalizeWhitespace: false,\n        disableCombineTextItems: false,\n    };\n    // @ts-expect-error todo: figure out the types\n    return data.getTextContent(options).then((textContent) => {\n        let lastY = '';\n        let text = '';\n        // @ts-expect-error todo: figure out the types\n        for (const item of textContent.items) {\n            if (!(lastY === item.transform[5] || !lastY))\n                text += '\\n';\n            // The word + a space\n            text += item.str + ' ';\n            lastY = item.transform[5];\n        }\n        return text;\n    });\n};\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,QAAQ,MAAM,4BAA4B;AACjD,OAAO,MAAMC,YAAY,CAAC;EACtBC,WAAWA,CAAA,EAAG;IACV;AACR;AACA;IACQ,IAAI,CAACC,KAAK,GAAG,CAAC,iBAAiB,CAAC;IAChC;AACR;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,KAAK,GAAG,MAAOC,KAAK,IAAK;MAC1B;MACA,MAAMC,SAAS,GAAI,MAAMN,QAAQ,CAACK,KAAK,EAAE;QACrCE,UAAU,EAAEC;MAChB,CAAC,CAAE;MACH,OAAOF,SAAS,CAACG,IAAI;IACzB,CAAC;EACL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMD,UAAU,GAAG,MAAOE,IAAI,IAAK;EAC/B,MAAMC,OAAO,GAAG;IACZC,mBAAmB,EAAE,KAAK;IAC1BC,uBAAuB,EAAE;EAC7B,CAAC;EACD;EACA,OAAOH,IAAI,CAACI,cAAc,CAACH,OAAO,CAAC,CAACI,IAAI,CAAEC,WAAW,IAAK;IACtD,IAAIC,KAAK,GAAG,EAAE;IACd,IAAIR,IAAI,GAAG,EAAE;IACb;IACA,KAAK,MAAMS,IAAI,IAAIF,WAAW,CAACG,KAAK,EAAE;MAClC,IAAI,EAAEF,KAAK,KAAKC,IAAI,CAACE,SAAS,CAAC,CAAC,CAAC,IAAI,CAACH,KAAK,CAAC,EACxCR,IAAI,IAAI,IAAI;MAChB;MACAA,IAAI,IAAIS,IAAI,CAACG,GAAG,GAAG,GAAG;MACtBJ,KAAK,GAAGC,IAAI,CAACE,SAAS,CAAC,CAAC,CAAC;IAC7B;IACA,OAAOX,IAAI;EACf,CAAC,CAAC;AACN,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}