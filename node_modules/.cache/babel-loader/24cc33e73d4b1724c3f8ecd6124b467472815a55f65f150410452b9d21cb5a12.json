{"ast":null,"code":"var _jsxFileName = \"D:\\\\LangChainJS\\\\chatpdf\\\\src\\\\Pdfdisp.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './Pdfdisp.css';\nimport { Uploader } from \"uploader\";\nimport { UploadDropzone } from \"react-uploader\";\nimport { extract } from '@extractus/article-extractor';\nimport { PDFExtract } from 'pdf-extract';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PdfChat() {\n  _s();\n  const pdfExtract = new PDFExtract();\n  const [uploadedFileUrl, setUploadedFileUrl] = useState(\"\");\n  const extractTextFromPDFUrl = async pdfUrl => {\n    try {\n      // Fetch the PDF file from the URL\n      const response = await fetch(pdfUrl);\n      const pdfData = await response.arrayBuffer();\n\n      // Extract text from the PDF data\n      const result = await pdfExtract.extractBuffer(pdfData, {});\n      return result.text; // Extracted text\n    } catch (error) {\n      console.error('Error extracting text:', error);\n      return null;\n    }\n  };\n  const handleComplete = async files => {\n    if (files.length > 0) {\n      const input = files[0].fileUrl;\n      console.log(input);\n      setUploadedFileUrl(input);\n\n      // Here\n      extractTextFromPDFUrl(input).then(text => {\n        console.log('Extracted text:', text);\n        // Use the extracted text in your React component\n      }).catch(error => {\n        console.error('Error extracting text:', error);\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pdf-div\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-heading\",\n      children: \"Welcome to ChatPDF Application\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UploadDropzone, {\n      uploader: Uploader({\n        apiKey: \"public_FW25c5Z7W7hFTqdUY9USFQFpmpMh\"\n      }),\n      options: {\n        multi: true\n      },\n      onUpdate: handleComplete,\n      width: \"600px\",\n      height: \"375px\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(PdfChat, \"9KAwY3NNldGsk3kyMQvrbybw64Y=\");\n_c = PdfChat;\nexport default PdfChat;\nvar _c;\n$RefreshReg$(_c, \"PdfChat\");","map":{"version":3,"names":["React","useState","Uploader","UploadDropzone","extract","PDFExtract","jsxDEV","_jsxDEV","PdfChat","_s","pdfExtract","uploadedFileUrl","setUploadedFileUrl","extractTextFromPDFUrl","pdfUrl","response","fetch","pdfData","arrayBuffer","result","extractBuffer","text","error","console","handleComplete","files","length","input","fileUrl","log","then","catch","className","children","fileName","_jsxFileName","lineNumber","columnNumber","uploader","apiKey","options","multi","onUpdate","width","height","_c","$RefreshReg$"],"sources":["D:/LangChainJS/chatpdf/src/Pdfdisp.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './Pdfdisp.css';\r\nimport { Uploader } from \"uploader\";\r\nimport { UploadDropzone } from \"react-uploader\";\r\nimport { extract } from '@extractus/article-extractor'\r\nimport { PDFExtract } from 'pdf-extract';\r\n\r\n\r\nfunction PdfChat() {\r\n\r\n  const pdfExtract = new PDFExtract();\r\n  const [uploadedFileUrl, setUploadedFileUrl] = useState(\"\");\r\n\r\n\r\n  const extractTextFromPDFUrl = async (pdfUrl) => {\r\n    try {\r\n      // Fetch the PDF file from the URL\r\n      const response = await fetch(pdfUrl);\r\n      const pdfData = await response.arrayBuffer();\r\n  \r\n      // Extract text from the PDF data\r\n      const result = await pdfExtract.extractBuffer(pdfData, {});\r\n  \r\n      return result.text; // Extracted text\r\n    } catch (error) {\r\n      console.error('Error extracting text:', error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const handleComplete = async (files) => {\r\n    if (files.length > 0) {\r\n      const input =files[0].fileUrl;\r\n      console.log(input);\r\n      setUploadedFileUrl(input);\r\n      \r\n\r\n      // Here\r\n      extractTextFromPDFUrl(input)\r\n  .then((text) => {\r\n    console.log('Extracted text:', text);\r\n    // Use the extracted text in your React component\r\n  })\r\n  .catch((error) => {\r\n    console.error('Error extracting text:', error);\r\n  });\r\n\r\n\r\n\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"pdf-div\">\r\n      <div className=\"main-heading\">Welcome to ChatPDF Application</div>\r\n      <UploadDropzone\r\n        uploader={Uploader({ apiKey: \"public_FW25c5Z7W7hFTqdUY9USFQFpmpMh\"})}\r\n        options={{ multi: true }}\r\n        onUpdate={handleComplete}\r\n        width=\"600px\"\r\n        height=\"375px\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PdfChat;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,eAAe;AACtB,SAASC,QAAQ,QAAQ,UAAU;AACnC,SAASC,cAAc,QAAQ,gBAAgB;AAC/C,SAASC,OAAO,QAAQ,8BAA8B;AACtD,SAASC,UAAU,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGzC,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EAEjB,MAAMC,UAAU,GAAG,IAAIL,UAAU,CAAC,CAAC;EACnC,MAAM,CAACM,eAAe,EAAEC,kBAAkB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAG1D,MAAMY,qBAAqB,GAAG,MAAOC,MAAM,IAAK;IAC9C,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,MAAM,CAAC;MACpC,MAAMG,OAAO,GAAG,MAAMF,QAAQ,CAACG,WAAW,CAAC,CAAC;;MAE5C;MACA,MAAMC,MAAM,GAAG,MAAMT,UAAU,CAACU,aAAa,CAACH,OAAO,EAAE,CAAC,CAAC,CAAC;MAE1D,OAAOE,MAAM,CAACE,IAAI,CAAC,CAAC;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,OAAO,IAAI;IACb;EACF,CAAC;EAWD,MAAME,cAAc,GAAG,MAAOC,KAAK,IAAK;IACtC,IAAIA,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;MACpB,MAAMC,KAAK,GAAEF,KAAK,CAAC,CAAC,CAAC,CAACG,OAAO;MAC7BL,OAAO,CAACM,GAAG,CAACF,KAAK,CAAC;MAClBf,kBAAkB,CAACe,KAAK,CAAC;;MAGzB;MACAd,qBAAqB,CAACc,KAAK,CAAC,CAC/BG,IAAI,CAAET,IAAI,IAAK;QACdE,OAAO,CAACM,GAAG,CAAC,iBAAiB,EAAER,IAAI,CAAC;QACpC;MACF,CAAC,CAAC,CACDU,KAAK,CAAET,KAAK,IAAK;QAChBC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD,CAAC,CAAC;IAIA;EACF,CAAC;EAED,oBACEf,OAAA;IAAKyB,SAAS,EAAC,SAAS;IAAAC,QAAA,gBACtB1B,OAAA;MAAKyB,SAAS,EAAC,cAAc;MAAAC,QAAA,EAAC;IAA8B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAClE9B,OAAA,CAACJ,cAAc;MACbmC,QAAQ,EAAEpC,QAAQ,CAAC;QAAEqC,MAAM,EAAE;MAAqC,CAAC,CAAE;MACrEC,OAAO,EAAE;QAAEC,KAAK,EAAE;MAAK,CAAE;MACzBC,QAAQ,EAAElB,cAAe;MACzBmB,KAAK,EAAC,OAAO;MACbC,MAAM,EAAC;IAAO;MAAAV,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACf,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAAC5B,EAAA,CAjEQD,OAAO;AAAAqC,EAAA,GAAPrC,OAAO;AAmEhB,eAAeA,OAAO;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}