{"ast":null,"code":"var _jsxFileName = \"D:\\\\LangChainJS\\\\chatpdf\\\\src\\\\Pdfdisp.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './Pdfdisp.css';\nimport { Uploader } from \"uploader\";\nimport { UploadDropzone } from \"react-uploader\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PdfChat({\n  onPdfText\n}) {\n  _s();\n  const [uploadedFileUrl, setUploadedFileUrl] = useState(\"\");\n  const [extractedText, setExtractedText] = useState('');\n  const handleComplete = async files => {\n    if (files.length > 0) {\n      const input = files[0].fileUrl;\n      console.log('Uploaded file URL:', input);\n      setUploadedFileUrl(input);\n      try {\n        const data = {\n          \"url\": input,\n          \"inline\": true,\n          \"async\": false\n        };\n        const response = await axios.post('https://api.pdf.co/v1/pdf/convert/to/text-simple', data, {\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n            'x-api-key': 'your-api-key-here'\n          }\n        });\n        const extractedText = response.data.body; // Access the correct property\n        console.log('Extracted text:', extractedText);\n        setExtractedText(extractedText);\n        const options = {\n          method: 'POST',\n          body: JSON.stringify({\n            instruction: `ONLY ANSWER QUESTIONS RELATED TO THE FOLLOWING PDF CONTENT: ${extractedText}`\n          }),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        };\n        const updateResponse = await fetch('http://localhost:8000/gemini/system', options);\n        if (!updateResponse.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const updateData = await updateResponse.json();\n        console.log('Server response:', updateData);\n      } catch (error) {\n        console.error('Error fetching PDF text:', error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pdf-div\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-heading\",\n      children: \"Welcome to ChatPDF Application\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UploadDropzone, {\n      uploader: Uploader({\n        apiKey: \"public_FW25c5Z7W7hFTqdUY9USFQFpmpMh\"\n      }),\n      options: {\n        multi: true\n      },\n      onUpdate: handleComplete,\n      width: \"600px\",\n      height: \"375px\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n_s(PdfChat, \"nFUtZFSwMFZvaq2WYV/w12eR9JM=\");\n_c = PdfChat;\nexport default PdfChat;\nvar _c;\n$RefreshReg$(_c, \"PdfChat\");","map":{"version":3,"names":["React","useState","Uploader","UploadDropzone","axios","jsxDEV","_jsxDEV","PdfChat","onPdfText","_s","uploadedFileUrl","setUploadedFileUrl","extractedText","setExtractedText","handleComplete","files","length","input","fileUrl","console","log","data","response","post","headers","body","options","method","JSON","stringify","instruction","updateResponse","fetch","ok","Error","updateData","json","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","uploader","apiKey","multi","onUpdate","width","height","_c","$RefreshReg$"],"sources":["D:/LangChainJS/chatpdf/src/Pdfdisp.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './Pdfdisp.css';\r\nimport { Uploader } from \"uploader\";\r\nimport { UploadDropzone } from \"react-uploader\";\r\nimport axios from 'axios';\r\n\r\nfunction PdfChat({ onPdfText }) {\r\n\r\n  const [uploadedFileUrl, setUploadedFileUrl] = useState(\"\");\r\n  const [extractedText, setExtractedText] = useState('');\r\n\r\n  const handleComplete = async (files) => {\r\n    if (files.length > 0) {\r\n      const input = files[0].fileUrl;\r\n      console.log('Uploaded file URL:', input);\r\n      setUploadedFileUrl(input);\r\n\r\n      try {\r\n        const data = {\r\n          \"url\": input,\r\n          \"inline\": true,\r\n          \"async\": false\r\n        };\r\n\r\n        const response = await axios.post('https://api.pdf.co/v1/pdf/convert/to/text-simple', data, {\r\n          headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'x-api-key': 'your-api-key-here'\r\n          }\r\n        });\r\n\r\n        const extractedText = response.data.body; // Access the correct property\r\n        console.log('Extracted text:', extractedText);\r\n        setExtractedText(extractedText);\r\n\r\n        const options = {\r\n          method: 'POST',\r\n          body: JSON.stringify({\r\n            instruction: `ONLY ANSWER QUESTIONS RELATED TO THE FOLLOWING PDF CONTENT: ${extractedText}`\r\n          }),\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          }\r\n        };\r\n\r\n        const updateResponse = await fetch('http://localhost:8000/gemini/system', options);\r\n        if (!updateResponse.ok) {\r\n          throw new Error('Network response was not ok');\r\n        }\r\n\r\n        const updateData = await updateResponse.json();\r\n        console.log('Server response:', updateData);\r\n\r\n      } catch (error) {\r\n        console.error('Error fetching PDF text:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"pdf-div\">\r\n      <div className=\"main-heading\">Welcome to ChatPDF Application</div>\r\n      <UploadDropzone\r\n        uploader={Uploader({ apiKey: \"public_FW25c5Z7W7hFTqdUY9USFQFpmpMh\" })}\r\n        options={{ multi: true }}\r\n        onUpdate={handleComplete}\r\n        width=\"600px\"\r\n        height=\"375px\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PdfChat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}