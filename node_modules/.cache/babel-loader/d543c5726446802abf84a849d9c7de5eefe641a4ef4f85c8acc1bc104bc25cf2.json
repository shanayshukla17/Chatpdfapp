{"ast":null,"code":"'use strict';\n\nconst checkType = (name, value, types) => {\n  const valid = types.some(type => {\n    const typeofType = typeof type;\n    if (typeofType === 'string') {\n      return typeof value === type;\n    }\n    return value instanceof type;\n  });\n  if (!valid) {\n    const names = types.map(type => typeof type === 'string' ? type : type.name);\n    throw new TypeError(`Expected '${name}' to be a type of ${names.join(' or ')}, got ${typeof value}`);\n  }\n};\nmodule.exports = checkType;","map":{"version":3,"names":["checkType","name","value","types","valid","some","type","typeofType","names","map","TypeError","join","module","exports"],"sources":["D:/LangChainJS/chatpdf/node_modules/http2-wrapper/source/utils/check-type.js"],"sourcesContent":["'use strict';\n\nconst checkType = (name, value, types) => {\n\tconst valid = types.some(type => {\n\t\tconst typeofType = typeof type;\n\t\tif (typeofType === 'string') {\n\t\t\treturn typeof value === type;\n\t\t}\n\n\t\treturn value instanceof type;\n\t});\n\n\tif (!valid) {\n\t\tconst names = types.map(type => typeof type === 'string' ? type : type.name);\n\n\t\tthrow new TypeError(`Expected '${name}' to be a type of ${names.join(' or ')}, got ${typeof value}`);\n\t}\n};\n\nmodule.exports = checkType;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,SAAS,GAAGA,CAACC,IAAI,EAAEC,KAAK,EAAEC,KAAK,KAAK;EACzC,MAAMC,KAAK,GAAGD,KAAK,CAACE,IAAI,CAACC,IAAI,IAAI;IAChC,MAAMC,UAAU,GAAG,OAAOD,IAAI;IAC9B,IAAIC,UAAU,KAAK,QAAQ,EAAE;MAC5B,OAAO,OAAOL,KAAK,KAAKI,IAAI;IAC7B;IAEA,OAAOJ,KAAK,YAAYI,IAAI;EAC7B,CAAC,CAAC;EAEF,IAAI,CAACF,KAAK,EAAE;IACX,MAAMI,KAAK,GAAGL,KAAK,CAACM,GAAG,CAACH,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,GAAGA,IAAI,GAAGA,IAAI,CAACL,IAAI,CAAC;IAE5E,MAAM,IAAIS,SAAS,CAAC,aAAaT,IAAI,qBAAqBO,KAAK,CAACG,IAAI,CAAC,MAAM,CAAC,SAAS,OAAOT,KAAK,EAAE,CAAC;EACrG;AACD,CAAC;AAEDU,MAAM,CAACC,OAAO,GAAGb,SAAS","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}